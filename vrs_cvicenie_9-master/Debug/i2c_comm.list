
i2c_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039dc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003b68  08003b68  00013b68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bf0  08003bf0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003bf0  08003bf0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bf0  08003bf0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bf0  08003bf0  00013bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bf4  08003bf4  00013bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  20000070  08003c68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08003c68  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004890  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001287  00000000  00000000  00024930  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000570  00000000  00000000  00025bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004a8  00000000  00000000  00026128  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000030d3  00000000  00000000  000265d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004d0d  00000000  00000000  000296a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00071e79  00000000  00000000  0002e3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a0229  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018bc  00000000  00000000  000a02a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b4c 	.word	0x08003b4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003b4c 	.word	0x08003b4c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	fa93 f3a3 	rbit	r3, r3
 8000b5a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	fab3 f383 	clz	r3, r3
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	2103      	movs	r1, #3
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	401a      	ands	r2, r3
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	fa93 f3a3 	rbit	r3, r3
 8000b78:	61bb      	str	r3, [r7, #24]
  return(result);
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	fab3 f383 	clz	r3, r3
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	fa01 f303 	lsl.w	r3, r1, r3
 8000b88:	431a      	orrs	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	601a      	str	r2, [r3, #0]
}
 8000b8e:	bf00      	nop
 8000b90:	3724      	adds	r7, #36	; 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b085      	sub	sp, #20
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	685a      	ldr	r2, [r3, #4]
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	401a      	ands	r2, r3
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	fb01 f303 	mul.w	r3, r1, r3
 8000bb8:	431a      	orrs	r2, r3
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	605a      	str	r2, [r3, #4]
}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b089      	sub	sp, #36	; 0x24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	60f8      	str	r0, [r7, #12]
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	689a      	ldr	r2, [r3, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	fa93 f3a3 	rbit	r3, r3
 8000be4:	613b      	str	r3, [r7, #16]
  return(result);
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	fab3 f383 	clz	r3, r3
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	2103      	movs	r1, #3
 8000bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	fa93 f3a3 	rbit	r3, r3
 8000c02:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	fab3 f383 	clz	r3, r3
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	431a      	orrs	r2, r3
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000c18:	bf00      	nop
 8000c1a:	3724      	adds	r7, #36	; 0x24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	68da      	ldr	r2, [r3, #12]
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa93 f3a3 	rbit	r3, r3
 8000c3e:	613b      	str	r3, [r7, #16]
  return(result);
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	fab3 f383 	clz	r3, r3
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	2103      	movs	r1, #3
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	401a      	ands	r2, r3
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	fa93 f3a3 	rbit	r3, r3
 8000c5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	fab3 f383 	clz	r3, r3
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6c:	431a      	orrs	r2, r3
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	60da      	str	r2, [r3, #12]
}
 8000c72:	bf00      	nop
 8000c74:	3724      	adds	r7, #36	; 0x24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b089      	sub	sp, #36	; 0x24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	60f8      	str	r0, [r7, #12]
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	6a1a      	ldr	r2, [r3, #32]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	fa93 f3a3 	rbit	r3, r3
 8000c98:	613b      	str	r3, [r7, #16]
  return(result);
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	fab3 f383 	clz	r3, r3
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	210f      	movs	r1, #15
 8000ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	401a      	ands	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	fa93 f3a3 	rbit	r3, r3
 8000cb6:	61bb      	str	r3, [r7, #24]
  return(result);
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	fab3 f383 	clz	r3, r3
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc6:	431a      	orrs	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000ccc:	bf00      	nop
 8000cce:	3724      	adds	r7, #36	; 0x24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	; 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	0a1b      	lsrs	r3, r3, #8
 8000cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	fa93 f3a3 	rbit	r3, r3
 8000cf4:	613b      	str	r3, [r7, #16]
  return(result);
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	fab3 f383 	clz	r3, r3
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	210f      	movs	r1, #15
 8000d00:	fa01 f303 	lsl.w	r3, r1, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	401a      	ands	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	0a1b      	lsrs	r3, r3, #8
 8000d0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	fa93 f3a3 	rbit	r3, r3
 8000d14:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	fab3 f383 	clz	r3, r3
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	fa01 f303 	lsl.w	r3, r1, r3
 8000d24:	431a      	orrs	r2, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000d2a:	bf00      	nop
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b088      	sub	sp, #32
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	fa93 f3a3 	rbit	r3, r3
 8000d54:	613b      	str	r3, [r7, #16]
  return(result);
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	fab3 f383 	clz	r3, r3
 8000d5c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000d5e:	e048      	b.n	8000df2 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	2101      	movs	r1, #1
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d03a      	beq.n	8000dec <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	69b9      	ldr	r1, [r7, #24]
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff fede 	bl	8000b40 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d003      	beq.n	8000d94 <LL_GPIO_Init+0x5e>
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d106      	bne.n	8000da2 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	69b9      	ldr	r1, [r7, #24]
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ff14 	bl	8000bca <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	691b      	ldr	r3, [r3, #16]
 8000da6:	461a      	mov	r2, r3
 8000da8:	69b9      	ldr	r1, [r7, #24]
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ff3a 	bl	8000c24 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d119      	bne.n	8000dec <LL_GPIO_Init+0xb6>
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	fa93 f3a3 	rbit	r3, r3
 8000dc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8000dc4:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000dc6:	fab3 f383 	clz	r3, r3
 8000dca:	2b07      	cmp	r3, #7
 8000dcc:	d807      	bhi.n	8000dde <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	69b9      	ldr	r1, [r7, #24]
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ff51 	bl	8000c7e <LL_GPIO_SetAFPin_0_7>
 8000ddc:	e006      	b.n	8000dec <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	461a      	mov	r2, r3
 8000de4:	69b9      	ldr	r1, [r7, #24]
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ff76 	bl	8000cd8 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	3301      	adds	r3, #1
 8000df0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d1af      	bne.n	8000d60 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d003      	beq.n	8000e10 <LL_GPIO_Init+0xda>
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d107      	bne.n	8000e20 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	6819      	ldr	r1, [r3, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff febd 	bl	8000b9a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3720      	adds	r7, #32
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f043 0201 	orr.w	r2, r3, #1
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	601a      	str	r2, [r3, #0]
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f023 0201 	bic.w	r2, r3, #1
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	601a      	str	r2, [r3, #0]
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b085      	sub	sp, #20
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	60f8      	str	r0, [r7, #12]
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	0219      	lsls	r1, r3, #8
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	430b      	orrs	r3, r1
 8000e86:	431a      	orrs	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	601a      	str	r2, [r3, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000eac:	f023 0307 	bic.w	r3, r3, #7
 8000eb0:	68b9      	ldr	r1, [r7, #8]
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	609a      	str	r2, [r3, #8]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	609a      	str	r2, [r3, #8]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	609a      	str	r2, [r3, #8]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	611a      	str	r2, [r3, #16]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	601a      	str	r2, [r3, #0]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	605a      	str	r2, [r3, #4]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ff65 	bl	8000e4a <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	6899      	ldr	r1, [r3, #8]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ff6d 	bl	8000e6a <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	4619      	mov	r1, r3
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ffb6 	bl	8000f08 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff44 	bl	8000e2a <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ffa0 	bl	8000ee8 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	6919      	ldr	r1, [r3, #16]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ff70 	bl	8000e98 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d002      	beq.n	8000fc6 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ff81 	bl	8000ec8 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ffa9 	bl	8000f24 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ffb6 	bl	8000f4a <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffa:	4a07      	ldr	r2, [pc, #28]	; (8001018 <LL_InitTick+0x30>)
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <LL_InitTick+0x30>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001006:	4b04      	ldr	r3, [pc, #16]	; (8001018 <LL_InitTick+0x30>)
 8001008:	2205      	movs	r2, #5
 800100a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000e010 	.word	0xe000e010

0800101c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001024:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ffdd 	bl	8000fe8 <LL_InitTick>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <LL_mDelay+0x44>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001046:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104e:	d00c      	beq.n	800106a <LL_mDelay+0x32>
  {
    Delay++;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3301      	adds	r3, #1
 8001054:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001056:	e008      	b.n	800106a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <LL_mDelay+0x44>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d002      	beq.n	800106a <LL_mDelay+0x32>
    {
      Delay--;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	607b      	str	r3, [r7, #4]
  while (Delay)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1f3      	bne.n	8001058 <LL_mDelay+0x20>
    }
  }
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000e010 	.word	0xe000e010

08001080 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <LL_SetSystemCoreClock+0x1c>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6013      	str	r3, [r2, #0]
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000000 	.word	0x20000000

080010a0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010aa:	695a      	ldr	r2, [r3, #20]
 80010ac:	4907      	ldr	r1, [pc, #28]	; (80010cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010b6:	695a      	ldr	r2, [r3, #20]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4013      	ands	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010be:	68fb      	ldr	r3, [r7, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	40021000 	.word	0x40021000

080010d0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80010d4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80010d8:	f7ff ffe2 	bl	80010a0 <LL_AHB1_GRP1_EnableClock>

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <NVIC_GetPriorityGrouping+0x18>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	0a1b      	lsrs	r3, r3, #8
 80010ea:	f003 0307 	and.w	r3, r3, #7
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	f003 021f 	and.w	r2, r3, #31
 800110c:	4907      	ldr	r1, [pc, #28]	; (800112c <NVIC_EnableIRQ+0x30>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	095b      	lsrs	r3, r3, #5
 8001114:	2001      	movs	r0, #1
 8001116:	fa00 f202 	lsl.w	r2, r0, r2
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000e100 	.word	0xe000e100

08001130 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	2b00      	cmp	r3, #0
 8001142:	da0b      	bge.n	800115c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	490c      	ldr	r1, [pc, #48]	; (800117c <NVIC_SetPriority+0x4c>)
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	f003 030f 	and.w	r3, r3, #15
 8001150:	3b04      	subs	r3, #4
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800115a:	e009      	b.n	8001170 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	4907      	ldr	r1, [pc, #28]	; (8001180 <NVIC_SetPriority+0x50>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00
 8001180:	e000e100 	.word	0xe000e100

08001184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	; 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f1c3 0307 	rsb	r3, r3, #7
 800119e:	2b04      	cmp	r3, #4
 80011a0:	bf28      	it	cs
 80011a2:	2304      	movcs	r3, #4
 80011a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3304      	adds	r3, #4
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d902      	bls.n	80011b4 <NVIC_EncodePriority+0x30>
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3b03      	subs	r3, #3
 80011b2:	e000      	b.n	80011b6 <NVIC_EncodePriority+0x32>
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	f04f 32ff 	mov.w	r2, #4294967295
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	401a      	ands	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011cc:	f04f 31ff 	mov.w	r1, #4294967295
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	43d9      	mvns	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	4313      	orrs	r3, r2
         );
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <LL_I2C_Enable>:
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f043 0201 	orr.w	r2, r3, #1
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	601a      	str	r2, [r3, #0]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <LL_I2C_EnableClockStretching>:
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	601a      	str	r2, [r3, #0]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <LL_I2C_DisableGeneralCall>:
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	601a      	str	r2, [r3, #0]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <LL_I2C_SetOwnAddress2>:
{
 800124a:	b480      	push	{r7}
 800124c:	b085      	sub	sp, #20
 800124e:	af00      	add	r7, sp, #0
 8001250:	60f8      	str	r0, [r7, #12]
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800125e:	f023 0306 	bic.w	r3, r3, #6
 8001262:	68b9      	ldr	r1, [r7, #8]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	430a      	orrs	r2, r1
 8001268:	431a      	orrs	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	60da      	str	r2, [r3, #12]
}
 800126e:	bf00      	nop
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <LL_I2C_DisableOwnAddress2>:
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	60da      	str	r2, [r3, #12]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <LL_I2C_EnableIT_RX>:
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f043 0204 	orr.w	r2, r3, #4
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	601a      	str	r2, [r3, #0]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <LL_I2C_DisableIT_RX>:
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f023 0204 	bic.w	r2, r3, #4
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	601a      	str	r2, [r3, #0]
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <LL_I2C_IsActiveFlag_TXIS>:
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	bf0c      	ite	eq
 80012ee:	2301      	moveq	r3, #1
 80012f0:	2300      	movne	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_I2C_IsActiveFlag_RXNE>:
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	2b04      	cmp	r3, #4
 8001312:	bf0c      	ite	eq
 8001314:	2301      	moveq	r3, #1
 8001316:	2300      	movne	r3, #0
 8001318:	b2db      	uxtb	r3, r3
}
 800131a:	4618      	mov	r0, r3
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <LL_I2C_IsActiveFlag_STOP>:
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	f003 0320 	and.w	r3, r3, #32
 8001336:	2b20      	cmp	r3, #32
 8001338:	bf0c      	ite	eq
 800133a:	2301      	moveq	r3, #1
 800133c:	2300      	movne	r3, #0
 800133e:	b2db      	uxtb	r3, r3
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_I2C_ClearFlag_STOP>:
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	f043 0220 	orr.w	r2, r3, #32
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	61da      	str	r2, [r3, #28]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <LL_I2C_EnableAutoEndMode>:
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	605a      	str	r2, [r3, #4]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	0d5b      	lsrs	r3, r3, #21
 80013a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <LL_I2C_HandleTransfer+0x48>)
 80013a8:	430b      	orrs	r3, r1
 80013aa:	43db      	mvns	r3, r3
 80013ac:	401a      	ands	r2, r3
 80013ae:	68b9      	ldr	r1, [r7, #8]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4319      	orrs	r1, r3
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	041b      	lsls	r3, r3, #16
 80013b8:	4319      	orrs	r1, r3
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	4319      	orrs	r1, r3
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	430b      	orrs	r3, r1
 80013c2:	431a      	orrs	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | TransferSize << I2C_CR2_NBYTES_Pos | EndMode | Request);
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	03ff7bff 	.word	0x03ff7bff

080013d8 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e4:	b2db      	uxtb	r3, r3
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	460b      	mov	r3, r1
 80013fc:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80013fe:	78fa      	ldrb	r2, [r7, #3]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <LL_AHB1_GRP1_EnableClock>:
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800141a:	695a      	ldr	r2, [r3, #20]
 800141c:	4907      	ldr	r1, [pc, #28]	; (800143c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4313      	orrs	r3, r2
 8001422:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001426:	695a      	ldr	r2, [r3, #20]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4013      	ands	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800142e:	68fb      	ldr	r3, [r7, #12]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	40021000 	.word	0x40021000

08001440 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <LL_APB1_GRP1_EnableClock+0x2c>)
 800144a:	69da      	ldr	r2, [r3, #28]
 800144c:	4907      	ldr	r1, [pc, #28]	; (800146c <LL_APB1_GRP1_EnableClock+0x2c>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4313      	orrs	r3, r2
 8001452:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001456:	69da      	ldr	r2, [r3, #28]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4013      	ands	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800145e:	68fb      	ldr	r3, [r7, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	40021000 	.word	0x40021000

08001470 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08e      	sub	sp, #56	; 0x38
 8001474:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]
 8001486:	615a      	str	r2, [r3, #20]
 8001488:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
 8001498:	615a      	str	r2, [r3, #20]
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800149a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800149e:	f7ff ffb7 	bl	8001410 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80014a2:	23c0      	movs	r3, #192	; 0xc0
 80014a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80014a6:	2302      	movs	r3, #2
 80014a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80014ae:	2301      	movs	r3, #1
 80014b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80014b6:	2304      	movs	r3, #4
 80014b8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	4619      	mov	r1, r3
 80014be:	4821      	ldr	r0, [pc, #132]	; (8001544 <MX_I2C1_Init+0xd4>)
 80014c0:	f7ff fc39 	bl	8000d36 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80014c4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80014c8:	f7ff ffba 	bl	8001440 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80014cc:	f7ff fe08 	bl	80010e0 <NVIC_GetPriorityGrouping>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fe54 	bl	8001184 <NVIC_EncodePriority>
 80014dc:	4603      	mov	r3, r0
 80014de:	4619      	mov	r1, r3
 80014e0:	201f      	movs	r0, #31
 80014e2:	f7ff fe25 	bl	8001130 <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014e6:	201f      	movs	r0, #31
 80014e8:	f7ff fe08 	bl	80010fc <NVIC_EnableIRQ>

  /** I2C Initialization 
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80014ec:	4816      	ldr	r0, [pc, #88]	; (8001548 <MX_I2C1_Init+0xd8>)
 80014ee:	f7ff ff3d 	bl	800136c <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80014f2:	4815      	ldr	r0, [pc, #84]	; (8001548 <MX_I2C1_Init+0xd8>)
 80014f4:	f7ff fec1 	bl	800127a <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80014f8:	4813      	ldr	r0, [pc, #76]	; (8001548 <MX_I2C1_Init+0xd8>)
 80014fa:	f7ff fe96 	bl	800122a <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80014fe:	4812      	ldr	r0, [pc, #72]	; (8001548 <MX_I2C1_Init+0xd8>)
 8001500:	f7ff fe83 	bl	800120a <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8001508:	4b10      	ldr	r3, [pc, #64]	; (800154c <MX_I2C1_Init+0xdc>)
 800150a:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8001514:	2302      	movs	r3, #2
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001518:	2300      	movs	r3, #0
 800151a:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800151c:	2300      	movs	r3, #0
 800151e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	4619      	mov	r1, r3
 8001526:	4808      	ldr	r0, [pc, #32]	; (8001548 <MX_I2C1_Init+0xd8>)
 8001528:	f7ff fd22 	bl	8000f70 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 800152c:	2200      	movs	r2, #0
 800152e:	2100      	movs	r1, #0
 8001530:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_I2C1_Init+0xd8>)
 8001532:	f7ff fe8a 	bl	800124a <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 8001536:	4804      	ldr	r0, [pc, #16]	; (8001548 <MX_I2C1_Init+0xd8>)
 8001538:	f7ff fe57 	bl	80011ea <LL_I2C_Enable>
}
 800153c:	bf00      	nop
 800153e:	3738      	adds	r7, #56	; 0x38
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	48000400 	.word	0x48000400
 8001548:	40005400 	.word	0x40005400
 800154c:	2000090e 	.word	0x2000090e

08001550 <i2c_master_write>:


void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8001550:	b590      	push	{r4, r7, lr}
 8001552:	b085      	sub	sp, #20
 8001554:	af02      	add	r7, sp, #8
 8001556:	4604      	mov	r4, r0
 8001558:	4608      	mov	r0, r1
 800155a:	4611      	mov	r1, r2
 800155c:	461a      	mov	r2, r3
 800155e:	4623      	mov	r3, r4
 8001560:	71fb      	strb	r3, [r7, #7]
 8001562:	4603      	mov	r3, r0
 8001564:	71bb      	strb	r3, [r7, #6]
 8001566:	460b      	mov	r3, r1
 8001568:	717b      	strb	r3, [r7, #5]
 800156a:	4613      	mov	r3, r2
 800156c:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 800156e:	793b      	ldrb	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8001574:	79bb      	ldrb	r3, [r7, #6]
 8001576:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800157a:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 800157c:	7979      	ldrb	r1, [r7, #5]
 800157e:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <i2c_master_write+0x80>)
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2302      	movs	r3, #2
 800158a:	2200      	movs	r2, #0
 800158c:	4811      	ldr	r0, [pc, #68]	; (80015d4 <i2c_master_write+0x84>)
 800158e:	f7ff fefd 	bl	800138c <LL_I2C_HandleTransfer>

		LL_I2C_TransmitData8(I2C1, register_addr);
 8001592:	79bb      	ldrb	r3, [r7, #6]
 8001594:	4619      	mov	r1, r3
 8001596:	480f      	ldr	r0, [pc, #60]	; (80015d4 <i2c_master_write+0x84>)
 8001598:	f7ff ff2b 	bl	80013f2 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800159c:	e00a      	b.n	80015b4 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 800159e:	480d      	ldr	r0, [pc, #52]	; (80015d4 <i2c_master_write+0x84>)
 80015a0:	f7ff fe9b 	bl	80012da <LL_I2C_IsActiveFlag_TXIS>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d004      	beq.n	80015b4 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	4619      	mov	r1, r3
 80015ae:	4809      	ldr	r0, [pc, #36]	; (80015d4 <i2c_master_write+0x84>)
 80015b0:	f7ff ff1f 	bl	80013f2 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80015b4:	4807      	ldr	r0, [pc, #28]	; (80015d4 <i2c_master_write+0x84>)
 80015b6:	f7ff feb6 	bl	8001326 <LL_I2C_IsActiveFlag_STOP>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0ee      	beq.n	800159e <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80015c0:	4804      	ldr	r0, [pc, #16]	; (80015d4 <i2c_master_write+0x84>)
 80015c2:	f7ff fec3 	bl	800134c <LL_I2C_ClearFlag_STOP>
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd90      	pop	{r4, r7, pc}
 80015ce:	bf00      	nop
 80015d0:	80002000 	.word	0x80002000
 80015d4:	40005400 	.word	0x40005400

080015d8 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af02      	add	r7, sp, #8
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	4608      	mov	r0, r1
 80015e2:	4611      	mov	r1, r2
 80015e4:	461a      	mov	r2, r3
 80015e6:	4603      	mov	r3, r0
 80015e8:	70fb      	strb	r3, [r7, #3]
 80015ea:	460b      	mov	r3, r1
 80015ec:	70bb      	strb	r3, [r7, #2]
 80015ee:	4613      	mov	r3, r2
 80015f0:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 80015f2:	4a31      	ldr	r2, [pc, #196]	; (80016b8 <i2c_master_read+0xe0>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6013      	str	r3, [r2, #0]

	if(read_flag)
 80015f8:	7c3b      	ldrb	r3, [r7, #16]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 80015fe:	78bb      	ldrb	r3, [r7, #2]
 8001600:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001604:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 8001606:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <i2c_master_read+0xe4>)
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 800160c:	482c      	ldr	r0, [pc, #176]	; (80016c0 <i2c_master_read+0xe8>)
 800160e:	f7ff fe44 	bl	800129a <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001612:	7879      	ldrb	r1, [r7, #1]
 8001614:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <i2c_master_read+0xec>)
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2301      	movs	r3, #1
 8001620:	2200      	movs	r2, #0
 8001622:	4827      	ldr	r0, [pc, #156]	; (80016c0 <i2c_master_read+0xe8>)
 8001624:	f7ff feb2 	bl	800138c <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001628:	e00a      	b.n	8001640 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 800162a:	4825      	ldr	r0, [pc, #148]	; (80016c0 <i2c_master_read+0xe8>)
 800162c:	f7ff fe55 	bl	80012da <LL_I2C_IsActiveFlag_TXIS>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d004      	beq.n	8001640 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 8001636:	78bb      	ldrb	r3, [r7, #2]
 8001638:	4619      	mov	r1, r3
 800163a:	4821      	ldr	r0, [pc, #132]	; (80016c0 <i2c_master_read+0xe8>)
 800163c:	f7ff fed9 	bl	80013f2 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001640:	481f      	ldr	r0, [pc, #124]	; (80016c0 <i2c_master_read+0xe8>)
 8001642:	f7ff fe70 	bl	8001326 <LL_I2C_IsActiveFlag_STOP>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0ee      	beq.n	800162a <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 800164c:	481c      	ldr	r0, [pc, #112]	; (80016c0 <i2c_master_read+0xe8>)
 800164e:	f7ff fe7d 	bl	800134c <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8001652:	bf00      	nop
 8001654:	481a      	ldr	r0, [pc, #104]	; (80016c0 <i2c_master_read+0xe8>)
 8001656:	f7ff fe66 	bl	8001326 <LL_I2C_IsActiveFlag_STOP>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f9      	bne.n	8001654 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001660:	7879      	ldrb	r1, [r7, #1]
 8001662:	78fa      	ldrb	r2, [r7, #3]
 8001664:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <i2c_master_read+0xf0>)
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	4613      	mov	r3, r2
 8001670:	2200      	movs	r2, #0
 8001672:	4813      	ldr	r0, [pc, #76]	; (80016c0 <i2c_master_read+0xe8>)
 8001674:	f7ff fe8a 	bl	800138c <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8001678:	bf00      	nop
 800167a:	4811      	ldr	r0, [pc, #68]	; (80016c0 <i2c_master_read+0xe8>)
 800167c:	f7ff fe53 	bl	8001326 <LL_I2C_IsActiveFlag_STOP>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f9      	beq.n	800167a <i2c_master_read+0xa2>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8001686:	480e      	ldr	r0, [pc, #56]	; (80016c0 <i2c_master_read+0xe8>)
 8001688:	f7ff fe60 	bl	800134c <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 800168c:	480c      	ldr	r0, [pc, #48]	; (80016c0 <i2c_master_read+0xe8>)
 800168e:	f7ff fe14 	bl	80012ba <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <i2c_master_read+0xe8>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <i2c_master_read+0xe8>)
 8001698:	f043 0310 	orr.w	r3, r3, #16
 800169c:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <i2c_master_read+0xf4>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <i2c_master_read+0xe4>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 80016aa:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <i2c_master_read+0xe0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000098 	.word	0x20000098
 80016bc:	2000008c 	.word	0x2000008c
 80016c0:	40005400 	.word	0x40005400
 80016c4:	80002000 	.word	0x80002000
 80016c8:	80002400 	.word	0x80002400
 80016cc:	2000008d 	.word	0x2000008d

080016d0 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 80016d0:	b598      	push	{r3, r4, r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 80016d4:	4812      	ldr	r0, [pc, #72]	; (8001720 <I2C1_EV_IRQHandler+0x50>)
 80016d6:	f7ff fe13 	bl	8001300 <LL_I2C_IsActiveFlag_RXNE>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d01c      	beq.n	800171a <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 80016e0:	4b10      	ldr	r3, [pc, #64]	; (8001724 <I2C1_EV_IRQHandler+0x54>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b10      	ldr	r3, [pc, #64]	; (8001728 <I2C1_EV_IRQHandler+0x58>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	1c59      	adds	r1, r3, #1
 80016ec:	b2c8      	uxtb	r0, r1
 80016ee:	490e      	ldr	r1, [pc, #56]	; (8001728 <I2C1_EV_IRQHandler+0x58>)
 80016f0:	7008      	strb	r0, [r1, #0]
 80016f2:	18d4      	adds	r4, r2, r3
 80016f4:	480a      	ldr	r0, [pc, #40]	; (8001720 <I2C1_EV_IRQHandler+0x50>)
 80016f6:	f7ff fe6f 	bl	80013d8 <LL_I2C_ReceiveData8>
 80016fa:	4603      	mov	r3, r0
 80016fc:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <I2C1_EV_IRQHandler+0x58>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b13      	cmp	r3, #19
 8001706:	d903      	bls.n	8001710 <I2C1_EV_IRQHandler+0x40>
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <I2C1_EV_IRQHandler+0x58>)
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
 800170e:	e001      	b.n	8001714 <I2C1_EV_IRQHandler+0x44>
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <I2C1_EV_IRQHandler+0x58>)
 8001712:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <I2C1_EV_IRQHandler+0x5c>)
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
	}
}
 800171a:	bf00      	nop
 800171c:	bd98      	pop	{r3, r4, r7, pc}
 800171e:	bf00      	nop
 8001720:	40005400 	.word	0x40005400
 8001724:	20000098 	.word	0x20000098
 8001728:	2000008d 	.word	0x2000008d
 800172c:	2000008c 	.word	0x2000008c

08001730 <NVIC_SetPriorityGrouping>:
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <NVIC_SetPriorityGrouping+0x44>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800174c:	4013      	ands	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800175c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001762:	4a04      	ldr	r2, [pc, #16]	; (8001774 <NVIC_SetPriorityGrouping+0x44>)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	60d3      	str	r3, [r2, #12]
}
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <LL_RCC_HSI_Enable+0x1c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <LL_RCC_HSI_Enable+0x1c>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000

08001798 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <LL_RCC_HSI_IsReady+0x20>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	bf0c      	ite	eq
 80017a8:	2301      	moveq	r3, #1
 80017aa:	2300      	movne	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	40021000 	.word	0x40021000

080017bc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80017c4:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4904      	ldr	r1, [pc, #16]	; (80017e4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000

080017e8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <LL_RCC_SetSysClkSource+0x24>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f023 0203 	bic.w	r2, r3, #3
 80017f8:	4904      	ldr	r1, [pc, #16]	; (800180c <LL_RCC_SetSysClkSource+0x24>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	40021000 	.word	0x40021000

08001810 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <LL_RCC_GetSysClkSource+0x18>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 030c 	and.w	r3, r3, #12
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000

0800182c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <LL_RCC_SetAHBPrescaler+0x24>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800183c:	4904      	ldr	r1, [pc, #16]	; (8001850 <LL_RCC_SetAHBPrescaler+0x24>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	40021000 	.word	0x40021000

08001854 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <LL_RCC_SetAPB1Prescaler+0x24>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001864:	4904      	ldr	r1, [pc, #16]	; (8001878 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	40021000 	.word	0x40021000

0800187c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800188c:	4904      	ldr	r1, [pc, #16]	; (80018a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	40021000 	.word	0x40021000

080018a4 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <LL_RCC_SetI2CClockSource+0x2c>)
 80018ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	0e1b      	lsrs	r3, r3, #24
 80018b4:	43db      	mvns	r3, r3
 80018b6:	401a      	ands	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80018be:	4904      	ldr	r1, [pc, #16]	; (80018d0 <LL_RCC_SetI2CClockSource+0x2c>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	630b      	str	r3, [r1, #48]	; 0x30
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	40021000 	.word	0x40021000

080018d4 <LL_APB1_GRP1_EnableClock>:
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018de:	69da      	ldr	r2, [r3, #28]
 80018e0:	4907      	ldr	r1, [pc, #28]	; (8001900 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018ea:	69da      	ldr	r2, [r3, #28]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4013      	ands	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	40021000 	.word	0x40021000

08001904 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <LL_APB2_GRP1_EnableClock+0x2c>)
 800190e:	699a      	ldr	r2, [r3, #24]
 8001910:	4907      	ldr	r1, [pc, #28]	; (8001930 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4313      	orrs	r3, r2
 8001916:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <LL_APB2_GRP1_EnableClock+0x2c>)
 800191a:	699a      	ldr	r2, [r3, #24]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4013      	ands	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001922:	68fb      	ldr	r3, [r7, #12]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	40021000 	.word	0x40021000

08001934 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <LL_FLASH_SetLatency+0x24>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f023 0207 	bic.w	r2, r3, #7
 8001944:	4904      	ldr	r1, [pc, #16]	; (8001958 <LL_FLASH_SetLatency+0x24>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4313      	orrs	r3, r2
 800194a:	600b      	str	r3, [r1, #0]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	40022000 	.word	0x40022000

0800195c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <LL_FLASH_GetLatency+0x18>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0307 	and.w	r3, r3, #7
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40022000 	.word	0x40022000

08001978 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b04      	cmp	r3, #4
 8001984:	d106      	bne.n	8001994 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <LL_SYSTICK_SetClkSource+0x34>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a08      	ldr	r2, [pc, #32]	; (80019ac <LL_SYSTICK_SetClkSource+0x34>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001992:	e005      	b.n	80019a0 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <LL_SYSTICK_SetClkSource+0x34>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a04      	ldr	r2, [pc, #16]	; (80019ac <LL_SYSTICK_SetClkSource+0x34>)
 800199a:	f023 0304 	bic.w	r3, r3, #4
 800199e:	6013      	str	r3, [r2, #0]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000e010 	.word	0xe000e010

080019b0 <main>:
float get_height_above_sea_level(float temp, float pressure);
float get_azimut(float x, float y);


int main(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80019b4:	2001      	movs	r0, #1
 80019b6:	f7ff ffa5 	bl	8001904 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80019ba:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80019be:	f7ff ff89 	bl	80018d4 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c2:	2003      	movs	r0, #3
 80019c4:	f7ff feb4 	bl	8001730 <NVIC_SetPriorityGrouping>

  SystemClock_Config();
 80019c8:	f000 f92a 	bl	8001c20 <SystemClock_Config>

  MX_GPIO_Init();
 80019cc:	f7ff fb80 	bl	80010d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80019d0:	f7ff fd4e 	bl	8001470 <MX_I2C1_Init>

  lsm6ds0_init();
 80019d4:	f000 faba 	bl	8001f4c <lsm6ds0_init>
  hts221_init();
 80019d8:	f000 fd8c 	bl	80024f4 <hts221_init>
  lis3mdl_init();
 80019dc:	f000 fb92 	bl	8002104 <lis3mdl_init>
  lps25hb_init();
 80019e0:	f000 fc30 	bl	8002244 <lps25hb_init>


  while (1)
  {
	  //os			   x      y        z
	  lsm6ds0_get_acc(acc, (acc+1), (acc+2));
 80019e4:	4b2b      	ldr	r3, [pc, #172]	; (8001a94 <main+0xe4>)
 80019e6:	4a2c      	ldr	r2, [pc, #176]	; (8001a98 <main+0xe8>)
 80019e8:	4619      	mov	r1, r3
 80019ea:	482c      	ldr	r0, [pc, #176]	; (8001a9c <main+0xec>)
 80019ec:	f000 fa44 	bl	8001e78 <lsm6ds0_get_acc>
	  LL_mDelay(50);
 80019f0:	2032      	movs	r0, #50	; 0x32
 80019f2:	f7ff fb21 	bl	8001038 <LL_mDelay>
	  temp=hts221_get_temp();
 80019f6:	f000 fce3 	bl	80023c0 <hts221_get_temp>
 80019fa:	eef0 7a40 	vmov.f32	s15, s0
 80019fe:	4b28      	ldr	r3, [pc, #160]	; (8001aa0 <main+0xf0>)
 8001a00:	edc3 7a00 	vstr	s15, [r3]
	  LL_mDelay(50);
 8001a04:	2032      	movs	r0, #50	; 0x32
 8001a06:	f7ff fb17 	bl	8001038 <LL_mDelay>
	  humidity=hts221_get_humidity();
 8001a0a:	f000 fc80 	bl	800230e <hts221_get_humidity>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <main+0xf4>)
 8001a14:	701a      	strb	r2, [r3, #0]
	  LL_mDelay(50);
 8001a16:	2032      	movs	r0, #50	; 0x32
 8001a18:	f7ff fb0e 	bl	8001038 <LL_mDelay>
	  pressure=lps25hb_get_pressure();
 8001a1c:	f000 fbe2 	bl	80021e4 <lps25hb_get_pressure>
 8001a20:	eef0 7a40 	vmov.f32	s15, s0
 8001a24:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <main+0xf8>)
 8001a26:	edc3 7a00 	vstr	s15, [r3]
	  LL_mDelay(50);
 8001a2a:	2032      	movs	r0, #50	; 0x32
 8001a2c:	f7ff fb04 	bl	8001038 <LL_mDelay>
	  height_above_sea_level=get_height_above_sea_level(temp, pressure);
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <main+0xf0>)
 8001a32:	edd3 7a00 	vldr	s15, [r3]
 8001a36:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <main+0xf8>)
 8001a38:	ed93 7a00 	vldr	s14, [r3]
 8001a3c:	eef0 0a47 	vmov.f32	s1, s14
 8001a40:	eeb0 0a67 	vmov.f32	s0, s15
 8001a44:	f000 f83c 	bl	8001ac0 <get_height_above_sea_level>
 8001a48:	eef0 7a40 	vmov.f32	s15, s0
 8001a4c:	4b17      	ldr	r3, [pc, #92]	; (8001aac <main+0xfc>)
 8001a4e:	edc3 7a00 	vstr	s15, [r3]
	  LL_mDelay(50);
 8001a52:	2032      	movs	r0, #50	; 0x32
 8001a54:	f7ff faf0 	bl	8001038 <LL_mDelay>
	  lis3mdl_get_mag(mag, (mag+1), (mag+2));
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <main+0x100>)
 8001a5a:	4a16      	ldr	r2, [pc, #88]	; (8001ab4 <main+0x104>)
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4816      	ldr	r0, [pc, #88]	; (8001ab8 <main+0x108>)
 8001a60:	f000 faee 	bl	8002040 <lis3mdl_get_mag>
	  LL_mDelay(50);
 8001a64:	2032      	movs	r0, #50	; 0x32
 8001a66:	f7ff fae7 	bl	8001038 <LL_mDelay>
	  azimut=get_azimut(mag[0], mag[1]);
 8001a6a:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <main+0x108>)
 8001a6c:	edd3 7a00 	vldr	s15, [r3]
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <main+0x108>)
 8001a72:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a76:	eef0 0a47 	vmov.f32	s1, s14
 8001a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a7e:	f000 f883 	bl	8001b88 <get_azimut>
 8001a82:	eef0 7a40 	vmov.f32	s15, s0
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <main+0x10c>)
 8001a88:	edc3 7a00 	vstr	s15, [r3]
	  LL_mDelay(50);
 8001a8c:	2032      	movs	r0, #50	; 0x32
 8001a8e:	f7ff fad3 	bl	8001038 <LL_mDelay>
	  lsm6ds0_get_acc(acc, (acc+1), (acc+2));
 8001a92:	e7a7      	b.n	80019e4 <main+0x34>
 8001a94:	200000a0 	.word	0x200000a0
 8001a98:	200000a4 	.word	0x200000a4
 8001a9c:	2000009c 	.word	0x2000009c
 8001aa0:	20000090 	.word	0x20000090
 8001aa4:	200000ac 	.word	0x200000ac
 8001aa8:	200000a8 	.word	0x200000a8
 8001aac:	200000b0 	.word	0x200000b0
 8001ab0:	200000bc 	.word	0x200000bc
 8001ab4:	200000c0 	.word	0x200000c0
 8001ab8:	200000b8 	.word	0x200000b8
 8001abc:	200000b4 	.word	0x200000b4

08001ac0 <get_height_above_sea_level>:

  }
}

float get_height_above_sea_level(float temp, float pressure){
 8001ac0:	b5b0      	push	{r4, r5, r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001aca:	edc7 0a00 	vstr	s1, [r7]
	return ((pow((1013.25/pressure),1/5.257)-1)*(temp+273.15))/0.0065;
 8001ace:	6838      	ldr	r0, [r7, #0]
 8001ad0:	f7fe fcde 	bl	8000490 <__aeabi_f2d>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	460c      	mov	r4, r1
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4623      	mov	r3, r4
 8001adc:	a127      	add	r1, pc, #156	; (adr r1, 8001b7c <get_height_above_sea_level+0xbc>)
 8001ade:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ae2:	f7fe fe57 	bl	8000794 <__aeabi_ddiv>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	460c      	mov	r4, r1
 8001aea:	ec44 3b17 	vmov	d7, r3, r4
 8001aee:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8001b60 <get_height_above_sea_level+0xa0>
 8001af2:	eeb0 0a47 	vmov.f32	s0, s14
 8001af6:	eef0 0a67 	vmov.f32	s1, s15
 8001afa:	f000 fd51 	bl	80025a0 <pow>
 8001afe:	ec51 0b10 	vmov	r0, r1, d0
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <get_height_above_sea_level+0xb8>)
 8001b08:	f7fe fb62 	bl	80001d0 <__aeabi_dsub>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	460c      	mov	r4, r1
 8001b10:	4625      	mov	r5, r4
 8001b12:	461c      	mov	r4, r3
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7fe fcbb 	bl	8000490 <__aeabi_f2d>
 8001b1a:	a313      	add	r3, pc, #76	; (adr r3, 8001b68 <get_height_above_sea_level+0xa8>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	f7fe fb58 	bl	80001d4 <__adddf3>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4620      	mov	r0, r4
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	f7fe fd08 	bl	8000540 <__aeabi_dmul>
 8001b30:	4603      	mov	r3, r0
 8001b32:	460c      	mov	r4, r1
 8001b34:	4618      	mov	r0, r3
 8001b36:	4621      	mov	r1, r4
 8001b38:	a30d      	add	r3, pc, #52	; (adr r3, 8001b70 <get_height_above_sea_level+0xb0>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	f7fe fe29 	bl	8000794 <__aeabi_ddiv>
 8001b42:	4603      	mov	r3, r0
 8001b44:	460c      	mov	r4, r1
 8001b46:	4618      	mov	r0, r3
 8001b48:	4621      	mov	r1, r4
 8001b4a:	f7fe ffa9 	bl	8000aa0 <__aeabi_d2f>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	ee07 3a90 	vmov	s15, r3
}
 8001b54:	eeb0 0a67 	vmov.f32	s0, s15
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	7dee2d4a 	.word	0x7dee2d4a
 8001b64:	3fc85936 	.word	0x3fc85936
 8001b68:	66666666 	.word	0x66666666
 8001b6c:	40711266 	.word	0x40711266
 8001b70:	76c8b439 	.word	0x76c8b439
 8001b74:	3f7a9fbe 	.word	0x3f7a9fbe
 8001b78:	3ff00000 	.word	0x3ff00000
 8001b7c:	00000000 	.word	0x00000000
 8001b80:	408faa00 	.word	0x408faa00
 8001b84:	00000000 	.word	0x00000000

08001b88 <get_azimut>:


float get_azimut(float x, float y){
 8001b88:	b5b0      	push	{r4, r5, r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b92:	edc7 0a00 	vstr	s1, [r7]
	  azimut= atan2(y, x)*(180/3.14);
 8001b96:	6838      	ldr	r0, [r7, #0]
 8001b98:	f7fe fc7a 	bl	8000490 <__aeabi_f2d>
 8001b9c:	4604      	mov	r4, r0
 8001b9e:	460d      	mov	r5, r1
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7fe fc75 	bl	8000490 <__aeabi_f2d>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	ec43 2b11 	vmov	d1, r2, r3
 8001bae:	ec45 4b10 	vmov	d0, r4, r5
 8001bb2:	f000 fcf3 	bl	800259c <atan2>
 8001bb6:	ec51 0b10 	vmov	r0, r1, d0
 8001bba:	a317      	add	r3, pc, #92	; (adr r3, 8001c18 <get_azimut+0x90>)
 8001bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc0:	f7fe fcbe 	bl	8000540 <__aeabi_dmul>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	460c      	mov	r4, r1
 8001bc8:	4618      	mov	r0, r3
 8001bca:	4621      	mov	r1, r4
 8001bcc:	f7fe ff68 	bl	8000aa0 <__aeabi_d2f>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <get_azimut+0x88>)
 8001bd4:	601a      	str	r2, [r3, #0]
	  if(azimut<0){
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <get_azimut+0x88>)
 8001bd8:	edd3 7a00 	vldr	s15, [r3]
 8001bdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be4:	d509      	bpl.n	8001bfa <get_azimut+0x72>
		  azimut+=360;
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <get_azimut+0x88>)
 8001be8:	edd3 7a00 	vldr	s15, [r3]
 8001bec:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001c14 <get_azimut+0x8c>
 8001bf0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <get_azimut+0x88>)
 8001bf6:	edc3 7a00 	vstr	s15, [r3]
	  }
	  return azimut;
 8001bfa:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <get_azimut+0x88>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	ee07 3a90 	vmov	s15, r3
}
 8001c02:	eeb0 0a67 	vmov.f32	s0, s15
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c0c:	f3af 8000 	nop.w
 8001c10:	200000b4 	.word	0x200000b4
 8001c14:	43b40000 	.word	0x43b40000
 8001c18:	61d59ae7 	.word	0x61d59ae7
 8001c1c:	404ca994 	.word	0x404ca994

08001c20 <SystemClock_Config>:



void SystemClock_Config(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff fe85 	bl	8001934 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001c2a:	f7ff fe97 	bl	800195c <LL_FLASH_GetLatency>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8001c34:	f000 f82e 	bl	8001c94 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8001c38:	f7ff fd9e 	bl	8001778 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001c3c:	bf00      	nop
 8001c3e:	f7ff fdab 	bl	8001798 <LL_RCC_HSI_IsReady>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d1fa      	bne.n	8001c3e <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001c48:	2010      	movs	r0, #16
 8001c4a:	f7ff fdb7 	bl	80017bc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f7ff fdec 	bl	800182c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001c54:	2000      	movs	r0, #0
 8001c56:	f7ff fdfd 	bl	8001854 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f7ff fe0e 	bl	800187c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001c60:	2000      	movs	r0, #0
 8001c62:	f7ff fdc1 	bl	80017e8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001c66:	bf00      	nop
 8001c68:	f7ff fdd2 	bl	8001810 <LL_RCC_GetSysClkSource>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1fa      	bne.n	8001c68 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8001c72:	4807      	ldr	r0, [pc, #28]	; (8001c90 <SystemClock_Config+0x70>)
 8001c74:	f7ff f9d2 	bl	800101c <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001c78:	2004      	movs	r0, #4
 8001c7a:	f7ff fe7d 	bl	8001978 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8001c7e:	4804      	ldr	r0, [pc, #16]	; (8001c90 <SystemClock_Config+0x70>)
 8001c80:	f7ff f9fe 	bl	8001080 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001c84:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001c88:	f7ff fe0c 	bl	80018a4 <LL_RCC_SetI2CClockSource>
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	007a1200 	.word	0x007a1200

08001c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <HardFault_Handler+0x4>

08001cb6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cba:	e7fe      	b.n	8001cba <MemManage_Handler+0x4>

08001cbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <BusFault_Handler+0x4>

08001cc2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <UsageFault_Handler+0x4>

08001cc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d04:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <SystemInit+0x84>)
 8001d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0a:	4a1e      	ldr	r2, [pc, #120]	; (8001d84 <SystemInit+0x84>)
 8001d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001d14:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <SystemInit+0x88>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a1b      	ldr	r2, [pc, #108]	; (8001d88 <SystemInit+0x88>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001d20:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <SystemInit+0x88>)
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	4918      	ldr	r1, [pc, #96]	; (8001d88 <SystemInit+0x88>)
 8001d26:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <SystemInit+0x8c>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001d2c:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <SystemInit+0x88>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a15      	ldr	r2, [pc, #84]	; (8001d88 <SystemInit+0x88>)
 8001d32:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <SystemInit+0x88>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a11      	ldr	r2, [pc, #68]	; (8001d88 <SystemInit+0x88>)
 8001d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d46:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <SystemInit+0x88>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <SystemInit+0x88>)
 8001d4e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001d52:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <SystemInit+0x88>)
 8001d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d58:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <SystemInit+0x88>)
 8001d5a:	f023 030f 	bic.w	r3, r3, #15
 8001d5e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <SystemInit+0x88>)
 8001d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d64:	4908      	ldr	r1, [pc, #32]	; (8001d88 <SystemInit+0x88>)
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <SystemInit+0x90>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <SystemInit+0x88>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d72:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <SystemInit+0x84>)
 8001d74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d78:	609a      	str	r2, [r3, #8]
#endif
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	f87fc00c 	.word	0xf87fc00c
 8001d90:	ff00fccc 	.word	0xff00fccc

08001d94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dcc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d98:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d9a:	e003      	b.n	8001da4 <LoopCopyDataInit>

08001d9c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d9e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001da0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001da2:	3104      	adds	r1, #4

08001da4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001da4:	480b      	ldr	r0, [pc, #44]	; (8001dd4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001da8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001daa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001dac:	d3f6      	bcc.n	8001d9c <CopyDataInit>
	ldr	r2, =_sbss
 8001dae:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001db0:	e002      	b.n	8001db8 <LoopFillZerobss>

08001db2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001db2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001db4:	f842 3b04 	str.w	r3, [r2], #4

08001db8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001db8:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <LoopForever+0x16>)
	cmp	r2, r3
 8001dba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001dbc:	d3f9      	bcc.n	8001db2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dbe:	f7ff ff9f 	bl	8001d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dc2:	f000 fbc7 	bl	8002554 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dc6:	f7ff fdf3 	bl	80019b0 <main>

08001dca <LoopForever>:

LoopForever:
    b LoopForever
 8001dca:	e7fe      	b.n	8001dca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001dcc:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001dd0:	08003bf8 	.word	0x08003bf8
	ldr	r0, =_sdata
 8001dd4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001dd8:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001ddc:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001de0:	200000c4 	.word	0x200000c4

08001de4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001de4:	e7fe      	b.n	8001de4 <ADC1_2_IRQHandler>
	...

08001de8 <lsm6ds0_read_byte>:

uint8_t addres = LSM6DS0_DEVICE_ADDRESS_0;
static uint8_t count_3=0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af02      	add	r7, sp, #8
 8001dee:	4603      	mov	r3, r0
 8001df0:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <lsm6ds0_read_byte+0x30>)
 8001df8:	7819      	ldrb	r1, [r3, #0]
 8001dfa:	79fa      	ldrb	r2, [r7, #7]
 8001dfc:	f107 000f 	add.w	r0, r7, #15
 8001e00:	2300      	movs	r3, #0
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	460b      	mov	r3, r1
 8001e06:	2101      	movs	r1, #1
 8001e08:	f7ff fbe6 	bl	80015d8 <i2c_master_read>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	781b      	ldrb	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000004 	.word	0x20000004

08001e1c <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	460a      	mov	r2, r1
 8001e26:	71fb      	strb	r3, [r7, #7]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <lsm6ds0_write_byte+0x28>)
 8001e2e:	781a      	ldrb	r2, [r3, #0]
 8001e30:	79f9      	ldrb	r1, [r7, #7]
 8001e32:	79b8      	ldrb	r0, [r7, #6]
 8001e34:	2300      	movs	r3, #0
 8001e36:	f7ff fb8b 	bl	8001550 <i2c_master_write>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000004 	.word	0x20000004

08001e48 <lsm6ds0_readArray>:


void lsm6ds0_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	70fb      	strb	r3, [r7, #3]
 8001e54:	4613      	mov	r3, r2
 8001e56:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addres, 1);
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <lsm6ds0_readArray+0x2c>)
 8001e5a:	7818      	ldrb	r0, [r3, #0]
 8001e5c:	78fa      	ldrb	r2, [r7, #3]
 8001e5e:	78b9      	ldrb	r1, [r7, #2]
 8001e60:	2301      	movs	r3, #1
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	4603      	mov	r3, r0
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff fbb6 	bl	80015d8 <i2c_master_read>
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000004 	.word	0x20000004

08001e78 <lsm6ds0_get_acc>:
	return (((int16_t)((temp[1] << 8) | temp[0])) >> 3)  + 25;
}


void lsm6ds0_get_acc(float* x, float* y, float* z)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
	int16_t xx, yy, zz;

	uint8_t temp;

	//get current scale and use it for final calculation
    temp = lsm6ds0_read_byte(LSM6DS0_ADDRESS_CTRL1);
 8001e84:	2010      	movs	r0, #16
 8001e86:	f7ff ffaf 	bl	8001de8 <lsm6ds0_read_byte>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	77fb      	strb	r3, [r7, #31]

	temp = temp >> 2;
 8001e8e:	7ffb      	ldrb	r3, [r7, #31]
 8001e90:	089b      	lsrs	r3, r3, #2
 8001e92:	77fb      	strb	r3, [r7, #31]
    temp &= 0x03;			//full scale bits exctracted
 8001e94:	7ffb      	ldrb	r3, [r7, #31]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	77fb      	strb	r3, [r7, #31]

	lsm6ds0_readArray(data, LSM6DS0_ADDRESS_ACCX, 6);
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	2206      	movs	r2, #6
 8001ea2:	2128      	movs	r1, #40	; 0x28
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ffcf 	bl	8001e48 <lsm6ds0_readArray>

	xx = ((uint16_t)data[1]) << 8 | data[0];
 8001eaa:	7c7b      	ldrb	r3, [r7, #17]
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	b21a      	sxth	r2, r3
 8001eb0:	7c3b      	ldrb	r3, [r7, #16]
 8001eb2:	b21b      	sxth	r3, r3
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	83bb      	strh	r3, [r7, #28]
	yy = ((uint16_t)data[3]) << 8 | data[2];
 8001eb8:	7cfb      	ldrb	r3, [r7, #19]
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	b21a      	sxth	r2, r3
 8001ebe:	7cbb      	ldrb	r3, [r7, #18]
 8001ec0:	b21b      	sxth	r3, r3
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	837b      	strh	r3, [r7, #26]
	zz = ((uint16_t)data[5]) << 8 | data[4];
 8001ec6:	7d7b      	ldrb	r3, [r7, #21]
 8001ec8:	021b      	lsls	r3, r3, #8
 8001eca:	b21a      	sxth	r2, r3
 8001ecc:	7d3b      	ldrb	r3, [r7, #20]
 8001ece:	b21b      	sxth	r3, r3
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	833b      	strh	r3, [r7, #24]

	*x = (xx >> 4) / 1000.0f;
 8001ed4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ed8:	111b      	asrs	r3, r3, #4
 8001eda:	b21b      	sxth	r3, r3
 8001edc:	ee07 3a90 	vmov	s15, r3
 8001ee0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee4:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001f44 <lsm6ds0_get_acc+0xcc>
 8001ee8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	edc3 7a00 	vstr	s15, [r3]
	*y = (yy >> 4) / 1000.0f;
 8001ef2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001ef6:	111b      	asrs	r3, r3, #4
 8001ef8:	b21b      	sxth	r3, r3
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f02:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001f44 <lsm6ds0_get_acc+0xcc>
 8001f06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	edc3 7a00 	vstr	s15, [r3]
	*z = (zz >> 4) / 1000.0f;
 8001f10:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001f14:	111b      	asrs	r3, r3, #4
 8001f16:	b21b      	sxth	r3, r3
 8001f18:	ee07 3a90 	vmov	s15, r3
 8001f1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f20:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001f44 <lsm6ds0_get_acc+0xcc>
 8001f24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	edc3 7a00 	vstr	s15, [r3]
	count_3++;
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <lsm6ds0_get_acc+0xd0>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	3301      	adds	r3, #1
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <lsm6ds0_get_acc+0xd0>)
 8001f38:	701a      	strb	r2, [r3, #0]
}
 8001f3a:	bf00      	nop
 8001f3c:	3720      	adds	r7, #32
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	447a0000 	.word	0x447a0000
 8001f48:	20000094 	.word	0x20000094

08001f4c <lsm6ds0_init>:


uint8_t lsm6ds0_init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8001f52:	2301      	movs	r3, #1
 8001f54:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8001f56:	2064      	movs	r0, #100	; 0x64
 8001f58:	f7ff f86e 	bl	8001038 <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8001f5c:	200f      	movs	r0, #15
 8001f5e:	f7ff ff43 	bl	8001de8 <lsm6ds0_read_byte>
 8001f62:	4603      	mov	r3, r0
 8001f64:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 8001f66:	79bb      	ldrb	r3, [r7, #6]
 8001f68:	2b68      	cmp	r3, #104	; 0x68
 8001f6a:	d102      	bne.n	8001f72 <lsm6ds0_init+0x26>
	{
		status = 1;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	71fb      	strb	r3, [r7, #7]
 8001f70:	e00f      	b.n	8001f92 <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres = LSM6DS0_DEVICE_ADDRESS_1;
 8001f72:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <lsm6ds0_init+0x60>)
 8001f74:	22d6      	movs	r2, #214	; 0xd6
 8001f76:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8001f78:	200f      	movs	r0, #15
 8001f7a:	f7ff ff35 	bl	8001de8 <lsm6ds0_read_byte>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 8001f82:	79bb      	ldrb	r3, [r7, #6]
 8001f84:	2b68      	cmp	r3, #104	; 0x68
 8001f86:	d102      	bne.n	8001f8e <lsm6ds0_init+0x42>
		{
			status = 1;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	71fb      	strb	r3, [r7, #7]
 8001f8c:	e001      	b.n	8001f92 <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	71fb      	strb	r3, [r7, #7]
		}
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 8001f92:	2380      	movs	r3, #128	; 0x80
 8001f94:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 8001f96:	797b      	ldrb	r3, [r7, #5]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	2010      	movs	r0, #16
 8001f9c:	f7ff ff3e 	bl	8001e1c <lsm6ds0_write_byte>

	return status;
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000004 	.word	0x20000004

08001fb0 <lis3mdl_read_byte>:
static uint8_t sLIS3MDLI2Caddress = LIS3MDL_DEVICE_ADDRESS;

uint64_t lastMovementTick = 0;

uint8_t lis3mdl_read_byte(uint8_t reg_addr)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, sLIS3MDLI2Caddress, 0));
 8001fbe:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <lis3mdl_read_byte+0x30>)
 8001fc0:	7819      	ldrb	r1, [r3, #0]
 8001fc2:	79fa      	ldrb	r2, [r7, #7]
 8001fc4:	f107 000f 	add.w	r0, r7, #15
 8001fc8:	2300      	movs	r3, #0
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	2101      	movs	r1, #1
 8001fd0:	f7ff fb02 	bl	80015d8 <i2c_master_read>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	781b      	ldrb	r3, [r3, #0]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000005 	.word	0x20000005

08001fe4 <lis3mdl_write_byte>:

void lis3mdl_write_byte(uint8_t reg_addr, uint8_t value)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	460a      	mov	r2, r1
 8001fee:	71fb      	strb	r3, [r7, #7]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, sLIS3MDLI2Caddress, 0);
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <lis3mdl_write_byte+0x28>)
 8001ff6:	781a      	ldrb	r2, [r3, #0]
 8001ff8:	79f9      	ldrb	r1, [r7, #7]
 8001ffa:	79b8      	ldrb	r0, [r7, #6]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f7ff faa7 	bl	8001550 <i2c_master_write>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000005 	.word	0x20000005

08002010 <lis3mdl_readArray>:

void lis3mdl_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af02      	add	r7, sp, #8
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	70fb      	strb	r3, [r7, #3]
 800201c:	4613      	mov	r3, r2
 800201e:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, sLIS3MDLI2Caddress, 1);
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <lis3mdl_readArray+0x2c>)
 8002022:	7818      	ldrb	r0, [r3, #0]
 8002024:	78fa      	ldrb	r2, [r7, #3]
 8002026:	78b9      	ldrb	r1, [r7, #2]
 8002028:	2301      	movs	r3, #1
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	4603      	mov	r3, r0
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff fad2 	bl	80015d8 <i2c_master_read>
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000005 	.word	0x20000005

08002040 <lis3mdl_get_mag>:

	return (((int16_t)((temp[1] << 8) | temp[0])) >> 3)  + 25;
}

void lis3mdl_get_mag(float* x, float* y, float* z)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	; 0x28
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
	int16_t xx, yy, zz;

	uint8_t temp;

	//get current scale and use it for final calculation
    temp = lis3mdl_read_byte(LIS3MDL_ADDRESS_CTRL3);
 800204c:	2022      	movs	r0, #34	; 0x22
 800204e:	f7ff ffaf 	bl	8001fb0 <lis3mdl_read_byte>
 8002052:	4603      	mov	r3, r0
 8002054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	temp = temp >> 5;
 8002058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800205c:	095b      	lsrs	r3, r3, #5
 800205e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    temp &= 0x03;			//full scale bits exctracted
 8002062:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	lis3mdl_readArray(data, LIS3MDL_ADDRESS_XL, 6);
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	2206      	movs	r2, #6
 8002074:	2128      	movs	r1, #40	; 0x28
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ffca 	bl	8002010 <lis3mdl_readArray>

	xx = ((uint16_t)data[1]) << 8 | data[0];
 800207c:	7d7b      	ldrb	r3, [r7, #21]
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	b21a      	sxth	r2, r3
 8002082:	7d3b      	ldrb	r3, [r7, #20]
 8002084:	b21b      	sxth	r3, r3
 8002086:	4313      	orrs	r3, r2
 8002088:	84bb      	strh	r3, [r7, #36]	; 0x24
	yy = ((uint16_t)data[3]) << 8 | data[2];
 800208a:	7dfb      	ldrb	r3, [r7, #23]
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	b21a      	sxth	r2, r3
 8002090:	7dbb      	ldrb	r3, [r7, #22]
 8002092:	b21b      	sxth	r3, r3
 8002094:	4313      	orrs	r3, r2
 8002096:	847b      	strh	r3, [r7, #34]	; 0x22
	zz = ((uint16_t)data[5]) << 8 | data[4];
 8002098:	7e7b      	ldrb	r3, [r7, #25]
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	b21a      	sxth	r2, r3
 800209e:	7e3b      	ldrb	r3, [r7, #24]
 80020a0:	b21b      	sxth	r3, r3
 80020a2:	4313      	orrs	r3, r2
 80020a4:	843b      	strh	r3, [r7, #32]

    const float range_scale = 6842.0f; //range +-4gaus
 80020a6:	4b16      	ldr	r3, [pc, #88]	; (8002100 <lis3mdl_get_mag+0xc0>)
 80020a8:	61fb      	str	r3, [r7, #28]

	*x = (float)(xx/range_scale);
 80020aa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80020ae:	ee07 3a90 	vmov	s15, r3
 80020b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80020b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80020ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	edc3 7a00 	vstr	s15, [r3]
	*y = (float)(yy/range_scale);
 80020c4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80020c8:	ee07 3a90 	vmov	s15, r3
 80020cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80020d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80020d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	edc3 7a00 	vstr	s15, [r3]
	*z = (float)(zz/range_scale);
 80020de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80020e2:	ee07 3a90 	vmov	s15, r3
 80020e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80020ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80020ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	edc3 7a00 	vstr	s15, [r3]
}
 80020f8:	bf00      	nop
 80020fa:	3728      	adds	r7, #40	; 0x28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	45d5d000 	.word	0x45d5d000

08002104 <lis3mdl_init>:


uint8_t lis3mdl_init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 800210a:	2301      	movs	r3, #1
 800210c:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 800210e:	2064      	movs	r0, #100	; 0x64
 8002110:	f7fe ff92 	bl	8001038 <LL_mDelay>

	uint8_t val = lis3mdl_read_byte(LIS3MDL_WHO_AM_I_ADDRES);
 8002114:	200f      	movs	r0, #15
 8002116:	f7ff ff4b 	bl	8001fb0 <lis3mdl_read_byte>
 800211a:	4603      	mov	r3, r0
 800211c:	71bb      	strb	r3, [r7, #6]

	if(val == LIS3MDL_WHO_AM_I_VALUE)
 800211e:	79bb      	ldrb	r3, [r7, #6]
 8002120:	2b3d      	cmp	r3, #61	; 0x3d
 8002122:	d102      	bne.n	800212a <lis3mdl_init+0x26>
	{
		status = 1;
 8002124:	2301      	movs	r3, #1
 8002126:	71fb      	strb	r3, [r7, #7]
 8002128:	e011      	b.n	800214e <lis3mdl_init+0x4a>
	}
	else			//if the device is not found on one address, try another one
	{
		sLIS3MDLI2Caddress = LIS3MDL_DEVICE_ADDRESS_ALTERNATIVE;
 800212a:	4b19      	ldr	r3, [pc, #100]	; (8002190 <lis3mdl_init+0x8c>)
 800212c:	223c      	movs	r2, #60	; 0x3c
 800212e:	701a      	strb	r2, [r3, #0]
		val = lis3mdl_read_byte(LIS3MDL_WHO_AM_I_ADDRES);
 8002130:	200f      	movs	r0, #15
 8002132:	f7ff ff3d 	bl	8001fb0 <lis3mdl_read_byte>
 8002136:	4603      	mov	r3, r0
 8002138:	71bb      	strb	r3, [r7, #6]
		if(val == LIS3MDL_WHO_AM_I_VALUE)
 800213a:	79bb      	ldrb	r3, [r7, #6]
 800213c:	2b3d      	cmp	r3, #61	; 0x3d
 800213e:	d102      	bne.n	8002146 <lis3mdl_init+0x42>
		{
			status = 1;
 8002140:	2301      	movs	r3, #1
 8002142:	71fb      	strb	r3, [r7, #7]
 8002144:	e003      	b.n	800214e <lis3mdl_init+0x4a>
		}
		else
		{
			status = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	71fb      	strb	r3, [r7, #7]
			return status;
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	e01c      	b.n	8002188 <lis3mdl_init+0x84>
		}
	}

	//acc device init

	uint8_t ctrl1 = LIS3MDL_CTRL1_OM_UHP | LIS3MDL_CTRL1_DO_80HZ | (1 << 7);
 800214e:	23fc      	movs	r3, #252	; 0xfc
 8002150:	717b      	strb	r3, [r7, #5]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL1, ctrl1);
 8002152:	797b      	ldrb	r3, [r7, #5]
 8002154:	4619      	mov	r1, r3
 8002156:	2020      	movs	r0, #32
 8002158:	f7ff ff44 	bl	8001fe4 <lis3mdl_write_byte>

	uint8_t ctrl2 = LIS3MDL_CTRL2_FS_4GAUS;
 800215c:	2300      	movs	r3, #0
 800215e:	713b      	strb	r3, [r7, #4]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL2, ctrl2);
 8002160:	793b      	ldrb	r3, [r7, #4]
 8002162:	4619      	mov	r1, r3
 8002164:	2021      	movs	r0, #33	; 0x21
 8002166:	f7ff ff3d 	bl	8001fe4 <lis3mdl_write_byte>

	uint8_t ctrl3 = LIS3MDL_CTRL3_MD_CONTINUES;
 800216a:	2300      	movs	r3, #0
 800216c:	70fb      	strb	r3, [r7, #3]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL3, ctrl3);
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	4619      	mov	r1, r3
 8002172:	2022      	movs	r0, #34	; 0x22
 8002174:	f7ff ff36 	bl	8001fe4 <lis3mdl_write_byte>

	uint8_t ctrl4 = LIS3MDL_CTRL4_OMZ_UHP;
 8002178:	230c      	movs	r3, #12
 800217a:	70bb      	strb	r3, [r7, #2]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL4, ctrl4);
 800217c:	78bb      	ldrb	r3, [r7, #2]
 800217e:	4619      	mov	r1, r3
 8002180:	2023      	movs	r0, #35	; 0x23
 8002182:	f7ff ff2f 	bl	8001fe4 <lis3mdl_write_byte>


	return status;
 8002186:	79fb      	ldrb	r3, [r7, #7]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20000005 	.word	0x20000005

08002194 <lps25hb_read_byte>:
#include "lps25hb.h"


uint8_t lps25hb_read_byte(uint8_t reg_addr)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af02      	add	r7, sp, #8
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, LPS25HB_DEVICE_ADDR_READ, 0));
 80021a2:	79fa      	ldrb	r2, [r7, #7]
 80021a4:	f107 000f 	add.w	r0, r7, #15
 80021a8:	2300      	movs	r3, #0
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	23bb      	movs	r3, #187	; 0xbb
 80021ae:	2101      	movs	r1, #1
 80021b0:	f7ff fa12 	bl	80015d8 <i2c_master_read>
 80021b4:	4603      	mov	r3, r0
 80021b6:	781b      	ldrb	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <lps25hb_write_byte>:


void lps25hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	460a      	mov	r2, r1
 80021ca:	71fb      	strb	r3, [r7, #7]
 80021cc:	4613      	mov	r3, r2
 80021ce:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, LPS25HB_DEVICE_ADDR_WRITE, 0);
 80021d0:	79f9      	ldrb	r1, [r7, #7]
 80021d2:	79b8      	ldrb	r0, [r7, #6]
 80021d4:	2300      	movs	r3, #0
 80021d6:	22ba      	movs	r2, #186	; 0xba
 80021d8:	f7ff f9ba 	bl	8001550 <i2c_master_write>
}
 80021dc:	bf00      	nop
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <lps25hb_get_pressure>:
void lps25hb_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
	i2c_master_read(data, length, reg, LPS25HB_DEVICE_ADDR_READ, 1);
}

float lps25hb_get_pressure(){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
	uint8_t press_H=lps25hb_read_byte(LPS25HB_PRESS_OUT_H);
 80021ea:	202a      	movs	r0, #42	; 0x2a
 80021ec:	f7ff ffd2 	bl	8002194 <lps25hb_read_byte>
 80021f0:	4603      	mov	r3, r0
 80021f2:	73fb      	strb	r3, [r7, #15]
	uint8_t press_L=lps25hb_read_byte(LPS25HB_PRESS_OUT_L);
 80021f4:	2029      	movs	r0, #41	; 0x29
 80021f6:	f7ff ffcd 	bl	8002194 <lps25hb_read_byte>
 80021fa:	4603      	mov	r3, r0
 80021fc:	73bb      	strb	r3, [r7, #14]
	uint8_t press_XL=lps25hb_read_byte(LPS25HB_PRESS_OUT_XL);
 80021fe:	2028      	movs	r0, #40	; 0x28
 8002200:	f7ff ffc8 	bl	8002194 <lps25hb_read_byte>
 8002204:	4603      	mov	r3, r0
 8002206:	737b      	strb	r3, [r7, #13]

	uint32_t pressure=(press_H << 16) | (press_L << 8) | press_XL;
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	041a      	lsls	r2, r3, #16
 800220c:	7bbb      	ldrb	r3, [r7, #14]
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	431a      	orrs	r2, r3
 8002212:	7b7b      	ldrb	r3, [r7, #13]
 8002214:	4313      	orrs	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]
	float pressure_out= ((float)pressure)/(float)4096;
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	ee07 3a90 	vmov	s15, r3
 800221e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002222:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002240 <lps25hb_get_pressure+0x5c>
 8002226:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800222a:	edc7 7a01 	vstr	s15, [r7, #4]


	return pressure_out;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	ee07 3a90 	vmov	s15, r3
}
 8002234:	eeb0 0a67 	vmov.f32	s0, s15
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	45800000 	.word	0x45800000

08002244 <lps25hb_init>:

uint8_t lps25hb_init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 800224a:	2301      	movs	r3, #1
 800224c:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);
 800224e:	2064      	movs	r0, #100	; 0x64
 8002250:	f7fe fef2 	bl	8001038 <LL_mDelay>

	uint8_t val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRESS);
 8002254:	200f      	movs	r0, #15
 8002256:	f7ff ff9d 	bl	8002194 <lps25hb_read_byte>
 800225a:	4603      	mov	r3, r0
 800225c:	71bb      	strb	r3, [r7, #6]

	if(val == LPS25HB_WHO_AM_I_VALUE)
 800225e:	79bb      	ldrb	r3, [r7, #6]
 8002260:	2bbd      	cmp	r3, #189	; 0xbd
 8002262:	d102      	bne.n	800226a <lps25hb_init+0x26>
	{
		status = 1;
 8002264:	2301      	movs	r3, #1
 8002266:	71fb      	strb	r3, [r7, #7]
 8002268:	e00c      	b.n	8002284 <lps25hb_init+0x40>
	}
	else			//if the device is not found on one address, try another one
	{
		val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRESS);
 800226a:	200f      	movs	r0, #15
 800226c:	f7ff ff92 	bl	8002194 <lps25hb_read_byte>
 8002270:	4603      	mov	r3, r0
 8002272:	71bb      	strb	r3, [r7, #6]
		if(val == LPS25HB_WHO_AM_I_VALUE)
 8002274:	79bb      	ldrb	r3, [r7, #6]
 8002276:	2bbd      	cmp	r3, #189	; 0xbd
 8002278:	d102      	bne.n	8002280 <lps25hb_init+0x3c>
		{
			status = 1;
 800227a:	2301      	movs	r3, #1
 800227c:	71fb      	strb	r3, [r7, #7]
 800227e:	e001      	b.n	8002284 <lps25hb_init+0x40>
		}
		else
		{
			status = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	71fb      	strb	r3, [r7, #7]
	}

	//temp device init


	lps25hb_write_byte(LPS25HB_CTRL_REG1, LPS25HB_CTRL_REG1_VAL); 	// zapnutie  senzora a nastavenia
 8002284:	2190      	movs	r1, #144	; 0x90
 8002286:	2020      	movs	r0, #32
 8002288:	f7ff ff9a 	bl	80021c0 <lps25hb_write_byte>

	return status;
 800228c:	79fb      	ldrb	r3, [r7, #7]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <hts221_read_byte>:
#include "hts221.h"


uint8_t hts221_read_byte(uint8_t reg_addr)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b086      	sub	sp, #24
 800229a:	af02      	add	r7, sp, #8
 800229c:	4603      	mov	r3, r0
 800229e:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, HTS221_DEVICE_ADDR_READ, 0));
 80022a4:	79fa      	ldrb	r2, [r7, #7]
 80022a6:	f107 000f 	add.w	r0, r7, #15
 80022aa:	2300      	movs	r3, #0
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	23bf      	movs	r3, #191	; 0xbf
 80022b0:	2101      	movs	r1, #1
 80022b2:	f7ff f991 	bl	80015d8 <i2c_master_read>
 80022b6:	4603      	mov	r3, r0
 80022b8:	781b      	ldrb	r3, [r3, #0]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <hts221_write_byte>:


void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	4603      	mov	r3, r0
 80022ca:	460a      	mov	r2, r1
 80022cc:	71fb      	strb	r3, [r7, #7]
 80022ce:	4613      	mov	r3, r2
 80022d0:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, HTS221_DEVICE_ADDR_WRITE, 0);
 80022d2:	79f9      	ldrb	r1, [r7, #7]
 80022d4:	79b8      	ldrb	r0, [r7, #6]
 80022d6:	2300      	movs	r3, #0
 80022d8:	22be      	movs	r2, #190	; 0xbe
 80022da:	f7ff f939 	bl	8001550 <i2c_master_write>
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <hts221_readArray>:


void hts221_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af02      	add	r7, sp, #8
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	460b      	mov	r3, r1
 80022f0:	70fb      	strb	r3, [r7, #3]
 80022f2:	4613      	mov	r3, r2
 80022f4:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, HTS221_DEVICE_ADDR_READ, 1);
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	78b9      	ldrb	r1, [r7, #2]
 80022fa:	2301      	movs	r3, #1
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	23bf      	movs	r3, #191	; 0xbf
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff f969 	bl	80015d8 <i2c_master_read>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <hts221_get_humidity>:

uint8_t hts221_get_humidity(){
 800230e:	b580      	push	{r7, lr}
 8002310:	b084      	sub	sp, #16
 8002312:	af00      	add	r7, sp, #0
	uint8_t buffer[2];

	uint16_t h_0_rh=(uint16_t)hts221_read_byte(HTS221_H_0_RH);
 8002314:	2030      	movs	r0, #48	; 0x30
 8002316:	f7ff ffbe 	bl	8002296 <hts221_read_byte>
 800231a:	4603      	mov	r3, r0
 800231c:	81fb      	strh	r3, [r7, #14]
	h_0_rh=h_0_rh/2;
 800231e:	89fb      	ldrh	r3, [r7, #14]
 8002320:	085b      	lsrs	r3, r3, #1
 8002322:	81fb      	strh	r3, [r7, #14]
	uint16_t h_1_rh=(uint16_t)hts221_read_byte(HTS221_H_1_RH);
 8002324:	2031      	movs	r0, #49	; 0x31
 8002326:	f7ff ffb6 	bl	8002296 <hts221_read_byte>
 800232a:	4603      	mov	r3, r0
 800232c:	81bb      	strh	r3, [r7, #12]
	h_1_rh=h_1_rh/2;
 800232e:	89bb      	ldrh	r3, [r7, #12]
 8002330:	085b      	lsrs	r3, r3, #1
 8002332:	81bb      	strh	r3, [r7, #12]

	hts221_readArray(buffer, HTS221_H_OUT, 2);
 8002334:	463b      	mov	r3, r7
 8002336:	2202      	movs	r2, #2
 8002338:	2128      	movs	r1, #40	; 0x28
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff ffd3 	bl	80022e6 <hts221_readArray>
	int16_t H_out= (((int16_t)buffer[1])<<8) | (int16_t)buffer[0];
 8002340:	787b      	ldrb	r3, [r7, #1]
 8002342:	021b      	lsls	r3, r3, #8
 8002344:	b21a      	sxth	r2, r3
 8002346:	783b      	ldrb	r3, [r7, #0]
 8002348:	b21b      	sxth	r3, r3
 800234a:	4313      	orrs	r3, r2
 800234c:	817b      	strh	r3, [r7, #10]
	hts221_readArray(buffer, HTS221_H_0, 2);
 800234e:	463b      	mov	r3, r7
 8002350:	2202      	movs	r2, #2
 8002352:	2136      	movs	r1, #54	; 0x36
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ffc6 	bl	80022e6 <hts221_readArray>
	int16_t H0_out= (((int16_t)buffer[1])<<8) | (int16_t)buffer[0];
 800235a:	787b      	ldrb	r3, [r7, #1]
 800235c:	021b      	lsls	r3, r3, #8
 800235e:	b21a      	sxth	r2, r3
 8002360:	783b      	ldrb	r3, [r7, #0]
 8002362:	b21b      	sxth	r3, r3
 8002364:	4313      	orrs	r3, r2
 8002366:	813b      	strh	r3, [r7, #8]
	hts221_readArray(buffer, HTS221_H_1, 2);
 8002368:	463b      	mov	r3, r7
 800236a:	2202      	movs	r2, #2
 800236c:	213a      	movs	r1, #58	; 0x3a
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ffb9 	bl	80022e6 <hts221_readArray>
	int16_t H1_out= (((int16_t)buffer[1])<<8) | (int16_t)buffer[0];
 8002374:	787b      	ldrb	r3, [r7, #1]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	b21a      	sxth	r2, r3
 800237a:	783b      	ldrb	r3, [r7, #0]
 800237c:	b21b      	sxth	r3, r3
 800237e:	4313      	orrs	r3, r2
 8002380:	80fb      	strh	r3, [r7, #6]

	uint8_t humidity=(uint8_t)(((H1_out - H_out)*h_0_rh + (H_out - H0_out)*h_1_rh) / (H1_out -H0_out));
 8002382:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002386:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	89fa      	ldrh	r2, [r7, #14]
 800238e:	fb02 f203 	mul.w	r2, r2, r3
 8002392:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002396:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800239a:	1acb      	subs	r3, r1, r3
 800239c:	89b9      	ldrh	r1, [r7, #12]
 800239e:	fb01 f303 	mul.w	r3, r1, r3
 80023a2:	441a      	add	r2, r3
 80023a4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80023a8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80023ac:	1acb      	subs	r3, r1, r3
 80023ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80023b2:	717b      	strb	r3, [r7, #5]
	return humidity;
 80023b4:	797b      	ldrb	r3, [r7, #5]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <hts221_get_temp>:

float hts221_get_temp() {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af00      	add	r7, sp, #0
	int16_t msb=hts221_read_byte(HTS221_T1_T0_MSB);
 80023c6:	2035      	movs	r0, #53	; 0x35
 80023c8:	f7ff ff65 	bl	8002296 <hts221_read_byte>
 80023cc:	4603      	mov	r3, r0
 80023ce:	837b      	strh	r3, [r7, #26]

	int16_t msb_T0=(msb & 0x3) << 8;
 80023d0:	8b7b      	ldrh	r3, [r7, #26]
 80023d2:	021b      	lsls	r3, r3, #8
 80023d4:	b21b      	sxth	r3, r3
 80023d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023da:	833b      	strh	r3, [r7, #24]
	int16_t msb_T1=(msb & 0xC) << 6;
 80023dc:	8b7b      	ldrh	r3, [r7, #26]
 80023de:	019b      	lsls	r3, r3, #6
 80023e0:	b21b      	sxth	r3, r3
 80023e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e6:	82fb      	strh	r3, [r7, #22]
	uint8_t buffer_2[2], buffer_4[4];


	hts221_readArray(buffer_2, HTS221_T0_degC_x8, 2);
 80023e8:	f107 0308 	add.w	r3, r7, #8
 80023ec:	2202      	movs	r2, #2
 80023ee:	2132      	movs	r1, #50	; 0x32
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff78 	bl	80022e6 <hts221_readArray>
	int16_t T0_degC= (msb_T0 | (int16_t)buffer_2[0])/8;
 80023f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80023fa:	7a3a      	ldrb	r2, [r7, #8]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	da00      	bge.n	8002404 <hts221_get_temp+0x44>
 8002402:	3307      	adds	r3, #7
 8002404:	10db      	asrs	r3, r3, #3
 8002406:	82bb      	strh	r3, [r7, #20]
	int16_t T1_degC= (msb_T1 | (int16_t)buffer_2[1])/8;
 8002408:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800240c:	7a7a      	ldrb	r2, [r7, #9]
 800240e:	4313      	orrs	r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	da00      	bge.n	8002416 <hts221_get_temp+0x56>
 8002414:	3307      	adds	r3, #7
 8002416:	10db      	asrs	r3, r3, #3
 8002418:	827b      	strh	r3, [r7, #18]

	hts221_readArray(buffer_2, HTS221_T_OUT, 2);
 800241a:	f107 0308 	add.w	r3, r7, #8
 800241e:	2202      	movs	r2, #2
 8002420:	212a      	movs	r1, #42	; 0x2a
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff ff5f 	bl	80022e6 <hts221_readArray>
	int16_t T_out= (((uint16_t)buffer_2[1])<<8) | (uint16_t)buffer_2[0];
 8002428:	7a7b      	ldrb	r3, [r7, #9]
 800242a:	021b      	lsls	r3, r3, #8
 800242c:	b21a      	sxth	r2, r3
 800242e:	7a3b      	ldrb	r3, [r7, #8]
 8002430:	b21b      	sxth	r3, r3
 8002432:	4313      	orrs	r3, r2
 8002434:	823b      	strh	r3, [r7, #16]
	hts221_readArray(buffer_4, HTS221_T0_OUT, 4);
 8002436:	1d3b      	adds	r3, r7, #4
 8002438:	2204      	movs	r2, #4
 800243a:	213c      	movs	r1, #60	; 0x3c
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff52 	bl	80022e6 <hts221_readArray>
	int16_t T0_out= (((uint16_t)buffer_4[1])<<8) | (uint16_t)buffer_4[0];
 8002442:	797b      	ldrb	r3, [r7, #5]
 8002444:	021b      	lsls	r3, r3, #8
 8002446:	b21a      	sxth	r2, r3
 8002448:	793b      	ldrb	r3, [r7, #4]
 800244a:	b21b      	sxth	r3, r3
 800244c:	4313      	orrs	r3, r2
 800244e:	81fb      	strh	r3, [r7, #14]
	int16_t T1_out= (((uint16_t)buffer_4[3])<<8) | (uint16_t)buffer_4[2];
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	021b      	lsls	r3, r3, #8
 8002454:	b21a      	sxth	r2, r3
 8002456:	79bb      	ldrb	r3, [r7, #6]
 8002458:	b21b      	sxth	r3, r3
 800245a:	4313      	orrs	r3, r2
 800245c:	81bb      	strh	r3, [r7, #12]

	float temp;
	temp=(float)((T1_out - T_out)*T0_degC + (T_out - T0_out)*T1_degC) / (T1_out -T0_out);
 800245e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002462:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800246c:	fb02 f203 	mul.w	r2, r2, r3
 8002470:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8002474:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002478:	1acb      	subs	r3, r1, r3
 800247a:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	4413      	add	r3, r2
 8002484:	ee07 3a90 	vmov	s15, r3
 8002488:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800248c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002490:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	ee07 3a90 	vmov	s15, r3
 800249a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800249e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024a2:	edc7 7a07 	vstr	s15, [r7, #28]
	if (temp >= 120){
 80024a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80024aa:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80024e4 <hts221_get_temp+0x124>
 80024ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b6:	db02      	blt.n	80024be <hts221_get_temp+0xfe>
		temp = 119.9;
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <hts221_get_temp+0x128>)
 80024ba:	61fb      	str	r3, [r7, #28]
 80024bc:	e00a      	b.n	80024d4 <hts221_get_temp+0x114>
	}
	else if (temp <= -40){
 80024be:	edd7 7a07 	vldr	s15, [r7, #28]
 80024c2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80024ec <hts221_get_temp+0x12c>
 80024c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ce:	d801      	bhi.n	80024d4 <hts221_get_temp+0x114>
		temp = -39.9;
 80024d0:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <hts221_get_temp+0x130>)
 80024d2:	61fb      	str	r3, [r7, #28]
	}

	return temp;
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	ee07 3a90 	vmov	s15, r3
}
 80024da:	eeb0 0a67 	vmov.f32	s0, s15
 80024de:	3720      	adds	r7, #32
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	42f00000 	.word	0x42f00000
 80024e8:	42efcccd 	.word	0x42efcccd
 80024ec:	c2200000 	.word	0xc2200000
 80024f0:	c21f999a 	.word	0xc21f999a

080024f4 <hts221_init>:


uint8_t hts221_init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 80024fa:	2301      	movs	r3, #1
 80024fc:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 80024fe:	2064      	movs	r0, #100	; 0x64
 8002500:	f7fe fd9a 	bl	8001038 <LL_mDelay>

	uint8_t val = hts221_read_byte(HTS221_DEVICE_ADDRESS);
 8002504:	205f      	movs	r0, #95	; 0x5f
 8002506:	f7ff fec6 	bl	8002296 <hts221_read_byte>
 800250a:	4603      	mov	r3, r0
 800250c:	71bb      	strb	r3, [r7, #6]

	if(val == HTS221_WHO_AM_I_VALUE)
 800250e:	79bb      	ldrb	r3, [r7, #6]
 8002510:	2bbc      	cmp	r3, #188	; 0xbc
 8002512:	d102      	bne.n	800251a <hts221_init+0x26>
	{
		status = 1;
 8002514:	2301      	movs	r3, #1
 8002516:	71fb      	strb	r3, [r7, #7]
 8002518:	e00c      	b.n	8002534 <hts221_init+0x40>
	}
	else			//if the device is not found on one address, try another one
	{
		val = hts221_read_byte(HTS221_WHO_AM_I_ADDRESS);
 800251a:	200f      	movs	r0, #15
 800251c:	f7ff febb 	bl	8002296 <hts221_read_byte>
 8002520:	4603      	mov	r3, r0
 8002522:	71bb      	strb	r3, [r7, #6]
		if(val == HTS221_WHO_AM_I_VALUE)
 8002524:	79bb      	ldrb	r3, [r7, #6]
 8002526:	2bbc      	cmp	r3, #188	; 0xbc
 8002528:	d102      	bne.n	8002530 <hts221_init+0x3c>
		{
			status = 1;
 800252a:	2301      	movs	r3, #1
 800252c:	71fb      	strb	r3, [r7, #7]
 800252e:	e001      	b.n	8002534 <hts221_init+0x40>
		}
		else
		{
			status = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	71fb      	strb	r3, [r7, #7]
	}

	//temp device init


	hts221_write_byte(HTS221_CTRL_REG1, HTS221_CTRL_REG1_VAL); 	// zapnutie  senzora a nastavenia
 8002534:	2181      	movs	r1, #129	; 0x81
 8002536:	2020      	movs	r0, #32
 8002538:	f7ff fec3 	bl	80022c2 <hts221_write_byte>

	return status;
 800253c:	79fb      	ldrb	r3, [r7, #7]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <__errno>:
 8002548:	4b01      	ldr	r3, [pc, #4]	; (8002550 <__errno+0x8>)
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	20000008 	.word	0x20000008

08002554 <__libc_init_array>:
 8002554:	b570      	push	{r4, r5, r6, lr}
 8002556:	4e0d      	ldr	r6, [pc, #52]	; (800258c <__libc_init_array+0x38>)
 8002558:	4c0d      	ldr	r4, [pc, #52]	; (8002590 <__libc_init_array+0x3c>)
 800255a:	1ba4      	subs	r4, r4, r6
 800255c:	10a4      	asrs	r4, r4, #2
 800255e:	2500      	movs	r5, #0
 8002560:	42a5      	cmp	r5, r4
 8002562:	d109      	bne.n	8002578 <__libc_init_array+0x24>
 8002564:	4e0b      	ldr	r6, [pc, #44]	; (8002594 <__libc_init_array+0x40>)
 8002566:	4c0c      	ldr	r4, [pc, #48]	; (8002598 <__libc_init_array+0x44>)
 8002568:	f001 faf0 	bl	8003b4c <_init>
 800256c:	1ba4      	subs	r4, r4, r6
 800256e:	10a4      	asrs	r4, r4, #2
 8002570:	2500      	movs	r5, #0
 8002572:	42a5      	cmp	r5, r4
 8002574:	d105      	bne.n	8002582 <__libc_init_array+0x2e>
 8002576:	bd70      	pop	{r4, r5, r6, pc}
 8002578:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800257c:	4798      	blx	r3
 800257e:	3501      	adds	r5, #1
 8002580:	e7ee      	b.n	8002560 <__libc_init_array+0xc>
 8002582:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002586:	4798      	blx	r3
 8002588:	3501      	adds	r5, #1
 800258a:	e7f2      	b.n	8002572 <__libc_init_array+0x1e>
 800258c:	08003bf0 	.word	0x08003bf0
 8002590:	08003bf0 	.word	0x08003bf0
 8002594:	08003bf0 	.word	0x08003bf0
 8002598:	08003bf4 	.word	0x08003bf4

0800259c <atan2>:
 800259c:	f000 b970 	b.w	8002880 <__ieee754_atan2>

080025a0 <pow>:
 80025a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025a4:	ed2d 8b04 	vpush	{d8-d9}
 80025a8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800287c <pow+0x2dc>
 80025ac:	b08d      	sub	sp, #52	; 0x34
 80025ae:	ec57 6b10 	vmov	r6, r7, d0
 80025b2:	ec55 4b11 	vmov	r4, r5, d1
 80025b6:	f000 fa43 	bl	8002a40 <__ieee754_pow>
 80025ba:	f999 3000 	ldrsb.w	r3, [r9]
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	3301      	adds	r3, #1
 80025c2:	eeb0 8a40 	vmov.f32	s16, s0
 80025c6:	eef0 8a60 	vmov.f32	s17, s1
 80025ca:	46c8      	mov	r8, r9
 80025cc:	d05f      	beq.n	800268e <pow+0xee>
 80025ce:	4622      	mov	r2, r4
 80025d0:	462b      	mov	r3, r5
 80025d2:	4620      	mov	r0, r4
 80025d4:	4629      	mov	r1, r5
 80025d6:	f7fe fa4d 	bl	8000a74 <__aeabi_dcmpun>
 80025da:	4683      	mov	fp, r0
 80025dc:	2800      	cmp	r0, #0
 80025de:	d156      	bne.n	800268e <pow+0xee>
 80025e0:	4632      	mov	r2, r6
 80025e2:	463b      	mov	r3, r7
 80025e4:	4630      	mov	r0, r6
 80025e6:	4639      	mov	r1, r7
 80025e8:	f7fe fa44 	bl	8000a74 <__aeabi_dcmpun>
 80025ec:	9001      	str	r0, [sp, #4]
 80025ee:	b1e8      	cbz	r0, 800262c <pow+0x8c>
 80025f0:	2200      	movs	r2, #0
 80025f2:	2300      	movs	r3, #0
 80025f4:	4620      	mov	r0, r4
 80025f6:	4629      	mov	r1, r5
 80025f8:	f7fe fa0a 	bl	8000a10 <__aeabi_dcmpeq>
 80025fc:	2800      	cmp	r0, #0
 80025fe:	d046      	beq.n	800268e <pow+0xee>
 8002600:	2301      	movs	r3, #1
 8002602:	9302      	str	r3, [sp, #8]
 8002604:	4b96      	ldr	r3, [pc, #600]	; (8002860 <pow+0x2c0>)
 8002606:	9303      	str	r3, [sp, #12]
 8002608:	4b96      	ldr	r3, [pc, #600]	; (8002864 <pow+0x2c4>)
 800260a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800260e:	2200      	movs	r2, #0
 8002610:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002614:	9b00      	ldr	r3, [sp, #0]
 8002616:	2b02      	cmp	r3, #2
 8002618:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800261c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002620:	d033      	beq.n	800268a <pow+0xea>
 8002622:	a802      	add	r0, sp, #8
 8002624:	f001 f97d 	bl	8003922 <matherr>
 8002628:	bb48      	cbnz	r0, 800267e <pow+0xde>
 800262a:	e05d      	b.n	80026e8 <pow+0x148>
 800262c:	f04f 0a00 	mov.w	sl, #0
 8002630:	f04f 0b00 	mov.w	fp, #0
 8002634:	4652      	mov	r2, sl
 8002636:	465b      	mov	r3, fp
 8002638:	4630      	mov	r0, r6
 800263a:	4639      	mov	r1, r7
 800263c:	f7fe f9e8 	bl	8000a10 <__aeabi_dcmpeq>
 8002640:	ec4b ab19 	vmov	d9, sl, fp
 8002644:	2800      	cmp	r0, #0
 8002646:	d054      	beq.n	80026f2 <pow+0x152>
 8002648:	4652      	mov	r2, sl
 800264a:	465b      	mov	r3, fp
 800264c:	4620      	mov	r0, r4
 800264e:	4629      	mov	r1, r5
 8002650:	f7fe f9de 	bl	8000a10 <__aeabi_dcmpeq>
 8002654:	4680      	mov	r8, r0
 8002656:	b318      	cbz	r0, 80026a0 <pow+0x100>
 8002658:	2301      	movs	r3, #1
 800265a:	9302      	str	r3, [sp, #8]
 800265c:	4b80      	ldr	r3, [pc, #512]	; (8002860 <pow+0x2c0>)
 800265e:	9303      	str	r3, [sp, #12]
 8002660:	9b01      	ldr	r3, [sp, #4]
 8002662:	930a      	str	r3, [sp, #40]	; 0x28
 8002664:	9b00      	ldr	r3, [sp, #0]
 8002666:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800266a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800266e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0d5      	beq.n	8002622 <pow+0x82>
 8002676:	4b7b      	ldr	r3, [pc, #492]	; (8002864 <pow+0x2c4>)
 8002678:	2200      	movs	r2, #0
 800267a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800267e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002680:	b11b      	cbz	r3, 800268a <pow+0xea>
 8002682:	f7ff ff61 	bl	8002548 <__errno>
 8002686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002688:	6003      	str	r3, [r0, #0]
 800268a:	ed9d 8b08 	vldr	d8, [sp, #32]
 800268e:	eeb0 0a48 	vmov.f32	s0, s16
 8002692:	eef0 0a68 	vmov.f32	s1, s17
 8002696:	b00d      	add	sp, #52	; 0x34
 8002698:	ecbd 8b04 	vpop	{d8-d9}
 800269c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026a0:	ec45 4b10 	vmov	d0, r4, r5
 80026a4:	f001 f935 	bl	8003912 <finite>
 80026a8:	2800      	cmp	r0, #0
 80026aa:	d0f0      	beq.n	800268e <pow+0xee>
 80026ac:	4652      	mov	r2, sl
 80026ae:	465b      	mov	r3, fp
 80026b0:	4620      	mov	r0, r4
 80026b2:	4629      	mov	r1, r5
 80026b4:	f7fe f9b6 	bl	8000a24 <__aeabi_dcmplt>
 80026b8:	2800      	cmp	r0, #0
 80026ba:	d0e8      	beq.n	800268e <pow+0xee>
 80026bc:	2301      	movs	r3, #1
 80026be:	9302      	str	r3, [sp, #8]
 80026c0:	4b67      	ldr	r3, [pc, #412]	; (8002860 <pow+0x2c0>)
 80026c2:	9303      	str	r3, [sp, #12]
 80026c4:	f999 3000 	ldrsb.w	r3, [r9]
 80026c8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80026cc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80026d0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80026d4:	b913      	cbnz	r3, 80026dc <pow+0x13c>
 80026d6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80026da:	e7a2      	b.n	8002622 <pow+0x82>
 80026dc:	4962      	ldr	r1, [pc, #392]	; (8002868 <pow+0x2c8>)
 80026de:	2000      	movs	r0, #0
 80026e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d19c      	bne.n	8002622 <pow+0x82>
 80026e8:	f7ff ff2e 	bl	8002548 <__errno>
 80026ec:	2321      	movs	r3, #33	; 0x21
 80026ee:	6003      	str	r3, [r0, #0]
 80026f0:	e7c5      	b.n	800267e <pow+0xde>
 80026f2:	eeb0 0a48 	vmov.f32	s0, s16
 80026f6:	eef0 0a68 	vmov.f32	s1, s17
 80026fa:	f001 f90a 	bl	8003912 <finite>
 80026fe:	9000      	str	r0, [sp, #0]
 8002700:	2800      	cmp	r0, #0
 8002702:	f040 8081 	bne.w	8002808 <pow+0x268>
 8002706:	ec47 6b10 	vmov	d0, r6, r7
 800270a:	f001 f902 	bl	8003912 <finite>
 800270e:	2800      	cmp	r0, #0
 8002710:	d07a      	beq.n	8002808 <pow+0x268>
 8002712:	ec45 4b10 	vmov	d0, r4, r5
 8002716:	f001 f8fc 	bl	8003912 <finite>
 800271a:	2800      	cmp	r0, #0
 800271c:	d074      	beq.n	8002808 <pow+0x268>
 800271e:	ec53 2b18 	vmov	r2, r3, d8
 8002722:	ee18 0a10 	vmov	r0, s16
 8002726:	4619      	mov	r1, r3
 8002728:	f7fe f9a4 	bl	8000a74 <__aeabi_dcmpun>
 800272c:	f999 9000 	ldrsb.w	r9, [r9]
 8002730:	4b4b      	ldr	r3, [pc, #300]	; (8002860 <pow+0x2c0>)
 8002732:	b1b0      	cbz	r0, 8002762 <pow+0x1c2>
 8002734:	2201      	movs	r2, #1
 8002736:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800273a:	9b00      	ldr	r3, [sp, #0]
 800273c:	930a      	str	r3, [sp, #40]	; 0x28
 800273e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002742:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002746:	f1b9 0f00 	cmp.w	r9, #0
 800274a:	d0c4      	beq.n	80026d6 <pow+0x136>
 800274c:	4652      	mov	r2, sl
 800274e:	465b      	mov	r3, fp
 8002750:	4650      	mov	r0, sl
 8002752:	4659      	mov	r1, fp
 8002754:	f7fe f81e 	bl	8000794 <__aeabi_ddiv>
 8002758:	f1b9 0f02 	cmp.w	r9, #2
 800275c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002760:	e7c1      	b.n	80026e6 <pow+0x146>
 8002762:	2203      	movs	r2, #3
 8002764:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002768:	900a      	str	r0, [sp, #40]	; 0x28
 800276a:	4629      	mov	r1, r5
 800276c:	4620      	mov	r0, r4
 800276e:	2200      	movs	r2, #0
 8002770:	4b3e      	ldr	r3, [pc, #248]	; (800286c <pow+0x2cc>)
 8002772:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002776:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800277a:	f7fd fee1 	bl	8000540 <__aeabi_dmul>
 800277e:	4604      	mov	r4, r0
 8002780:	460d      	mov	r5, r1
 8002782:	f1b9 0f00 	cmp.w	r9, #0
 8002786:	d124      	bne.n	80027d2 <pow+0x232>
 8002788:	4b39      	ldr	r3, [pc, #228]	; (8002870 <pow+0x2d0>)
 800278a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800278e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002792:	4630      	mov	r0, r6
 8002794:	4652      	mov	r2, sl
 8002796:	465b      	mov	r3, fp
 8002798:	4639      	mov	r1, r7
 800279a:	f7fe f943 	bl	8000a24 <__aeabi_dcmplt>
 800279e:	2800      	cmp	r0, #0
 80027a0:	d056      	beq.n	8002850 <pow+0x2b0>
 80027a2:	ec45 4b10 	vmov	d0, r4, r5
 80027a6:	f001 f8c7 	bl	8003938 <rint>
 80027aa:	4622      	mov	r2, r4
 80027ac:	462b      	mov	r3, r5
 80027ae:	ec51 0b10 	vmov	r0, r1, d0
 80027b2:	f7fe f92d 	bl	8000a10 <__aeabi_dcmpeq>
 80027b6:	b920      	cbnz	r0, 80027c2 <pow+0x222>
 80027b8:	4b2e      	ldr	r3, [pc, #184]	; (8002874 <pow+0x2d4>)
 80027ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80027be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80027c2:	f998 3000 	ldrsb.w	r3, [r8]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d142      	bne.n	8002850 <pow+0x2b0>
 80027ca:	f7ff febd 	bl	8002548 <__errno>
 80027ce:	2322      	movs	r3, #34	; 0x22
 80027d0:	e78d      	b.n	80026ee <pow+0x14e>
 80027d2:	4b29      	ldr	r3, [pc, #164]	; (8002878 <pow+0x2d8>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80027da:	4630      	mov	r0, r6
 80027dc:	4652      	mov	r2, sl
 80027de:	465b      	mov	r3, fp
 80027e0:	4639      	mov	r1, r7
 80027e2:	f7fe f91f 	bl	8000a24 <__aeabi_dcmplt>
 80027e6:	2800      	cmp	r0, #0
 80027e8:	d0eb      	beq.n	80027c2 <pow+0x222>
 80027ea:	ec45 4b10 	vmov	d0, r4, r5
 80027ee:	f001 f8a3 	bl	8003938 <rint>
 80027f2:	4622      	mov	r2, r4
 80027f4:	462b      	mov	r3, r5
 80027f6:	ec51 0b10 	vmov	r0, r1, d0
 80027fa:	f7fe f909 	bl	8000a10 <__aeabi_dcmpeq>
 80027fe:	2800      	cmp	r0, #0
 8002800:	d1df      	bne.n	80027c2 <pow+0x222>
 8002802:	2200      	movs	r2, #0
 8002804:	4b18      	ldr	r3, [pc, #96]	; (8002868 <pow+0x2c8>)
 8002806:	e7da      	b.n	80027be <pow+0x21e>
 8002808:	2200      	movs	r2, #0
 800280a:	2300      	movs	r3, #0
 800280c:	ec51 0b18 	vmov	r0, r1, d8
 8002810:	f7fe f8fe 	bl	8000a10 <__aeabi_dcmpeq>
 8002814:	2800      	cmp	r0, #0
 8002816:	f43f af3a 	beq.w	800268e <pow+0xee>
 800281a:	ec47 6b10 	vmov	d0, r6, r7
 800281e:	f001 f878 	bl	8003912 <finite>
 8002822:	2800      	cmp	r0, #0
 8002824:	f43f af33 	beq.w	800268e <pow+0xee>
 8002828:	ec45 4b10 	vmov	d0, r4, r5
 800282c:	f001 f871 	bl	8003912 <finite>
 8002830:	2800      	cmp	r0, #0
 8002832:	f43f af2c 	beq.w	800268e <pow+0xee>
 8002836:	2304      	movs	r3, #4
 8002838:	9302      	str	r3, [sp, #8]
 800283a:	4b09      	ldr	r3, [pc, #36]	; (8002860 <pow+0x2c0>)
 800283c:	9303      	str	r3, [sp, #12]
 800283e:	2300      	movs	r3, #0
 8002840:	930a      	str	r3, [sp, #40]	; 0x28
 8002842:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002846:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800284a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800284e:	e7b8      	b.n	80027c2 <pow+0x222>
 8002850:	a802      	add	r0, sp, #8
 8002852:	f001 f866 	bl	8003922 <matherr>
 8002856:	2800      	cmp	r0, #0
 8002858:	f47f af11 	bne.w	800267e <pow+0xde>
 800285c:	e7b5      	b.n	80027ca <pow+0x22a>
 800285e:	bf00      	nop
 8002860:	08003b68 	.word	0x08003b68
 8002864:	3ff00000 	.word	0x3ff00000
 8002868:	fff00000 	.word	0xfff00000
 800286c:	3fe00000 	.word	0x3fe00000
 8002870:	47efffff 	.word	0x47efffff
 8002874:	c7efffff 	.word	0xc7efffff
 8002878:	7ff00000 	.word	0x7ff00000
 800287c:	2000006c 	.word	0x2000006c

08002880 <__ieee754_atan2>:
 8002880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002884:	ec57 6b11 	vmov	r6, r7, d1
 8002888:	4273      	negs	r3, r6
 800288a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800288e:	4333      	orrs	r3, r6
 8002890:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8002a38 <__ieee754_atan2+0x1b8>
 8002894:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8002898:	4573      	cmp	r3, lr
 800289a:	ec51 0b10 	vmov	r0, r1, d0
 800289e:	ee11 8a10 	vmov	r8, s2
 80028a2:	d80a      	bhi.n	80028ba <__ieee754_atan2+0x3a>
 80028a4:	4244      	negs	r4, r0
 80028a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80028aa:	4304      	orrs	r4, r0
 80028ac:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80028b0:	4574      	cmp	r4, lr
 80028b2:	468c      	mov	ip, r1
 80028b4:	ee10 9a10 	vmov	r9, s0
 80028b8:	d907      	bls.n	80028ca <__ieee754_atan2+0x4a>
 80028ba:	4632      	mov	r2, r6
 80028bc:	463b      	mov	r3, r7
 80028be:	f7fd fc89 	bl	80001d4 <__adddf3>
 80028c2:	ec41 0b10 	vmov	d0, r0, r1
 80028c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028ca:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80028ce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80028d2:	4334      	orrs	r4, r6
 80028d4:	d103      	bne.n	80028de <__ieee754_atan2+0x5e>
 80028d6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028da:	f000 be71 	b.w	80035c0 <atan>
 80028de:	17bc      	asrs	r4, r7, #30
 80028e0:	f004 0402 	and.w	r4, r4, #2
 80028e4:	ea53 0909 	orrs.w	r9, r3, r9
 80028e8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80028ec:	d107      	bne.n	80028fe <__ieee754_atan2+0x7e>
 80028ee:	2c02      	cmp	r4, #2
 80028f0:	d073      	beq.n	80029da <__ieee754_atan2+0x15a>
 80028f2:	2c03      	cmp	r4, #3
 80028f4:	d1e5      	bne.n	80028c2 <__ieee754_atan2+0x42>
 80028f6:	a13e      	add	r1, pc, #248	; (adr r1, 80029f0 <__ieee754_atan2+0x170>)
 80028f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028fc:	e7e1      	b.n	80028c2 <__ieee754_atan2+0x42>
 80028fe:	ea52 0808 	orrs.w	r8, r2, r8
 8002902:	d106      	bne.n	8002912 <__ieee754_atan2+0x92>
 8002904:	f1bc 0f00 	cmp.w	ip, #0
 8002908:	da6b      	bge.n	80029e2 <__ieee754_atan2+0x162>
 800290a:	a13b      	add	r1, pc, #236	; (adr r1, 80029f8 <__ieee754_atan2+0x178>)
 800290c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002910:	e7d7      	b.n	80028c2 <__ieee754_atan2+0x42>
 8002912:	4572      	cmp	r2, lr
 8002914:	d120      	bne.n	8002958 <__ieee754_atan2+0xd8>
 8002916:	4293      	cmp	r3, r2
 8002918:	d111      	bne.n	800293e <__ieee754_atan2+0xbe>
 800291a:	2c02      	cmp	r4, #2
 800291c:	d007      	beq.n	800292e <__ieee754_atan2+0xae>
 800291e:	2c03      	cmp	r4, #3
 8002920:	d009      	beq.n	8002936 <__ieee754_atan2+0xb6>
 8002922:	2c01      	cmp	r4, #1
 8002924:	d155      	bne.n	80029d2 <__ieee754_atan2+0x152>
 8002926:	a136      	add	r1, pc, #216	; (adr r1, 8002a00 <__ieee754_atan2+0x180>)
 8002928:	e9d1 0100 	ldrd	r0, r1, [r1]
 800292c:	e7c9      	b.n	80028c2 <__ieee754_atan2+0x42>
 800292e:	a136      	add	r1, pc, #216	; (adr r1, 8002a08 <__ieee754_atan2+0x188>)
 8002930:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002934:	e7c5      	b.n	80028c2 <__ieee754_atan2+0x42>
 8002936:	a136      	add	r1, pc, #216	; (adr r1, 8002a10 <__ieee754_atan2+0x190>)
 8002938:	e9d1 0100 	ldrd	r0, r1, [r1]
 800293c:	e7c1      	b.n	80028c2 <__ieee754_atan2+0x42>
 800293e:	2c02      	cmp	r4, #2
 8002940:	d04b      	beq.n	80029da <__ieee754_atan2+0x15a>
 8002942:	2c03      	cmp	r4, #3
 8002944:	d0d7      	beq.n	80028f6 <__ieee754_atan2+0x76>
 8002946:	2c01      	cmp	r4, #1
 8002948:	f04f 0000 	mov.w	r0, #0
 800294c:	d102      	bne.n	8002954 <__ieee754_atan2+0xd4>
 800294e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002952:	e7b6      	b.n	80028c2 <__ieee754_atan2+0x42>
 8002954:	2100      	movs	r1, #0
 8002956:	e7b4      	b.n	80028c2 <__ieee754_atan2+0x42>
 8002958:	4573      	cmp	r3, lr
 800295a:	d0d3      	beq.n	8002904 <__ieee754_atan2+0x84>
 800295c:	1a9b      	subs	r3, r3, r2
 800295e:	151b      	asrs	r3, r3, #20
 8002960:	2b3c      	cmp	r3, #60	; 0x3c
 8002962:	dc1e      	bgt.n	80029a2 <__ieee754_atan2+0x122>
 8002964:	2f00      	cmp	r7, #0
 8002966:	da01      	bge.n	800296c <__ieee754_atan2+0xec>
 8002968:	333c      	adds	r3, #60	; 0x3c
 800296a:	db1e      	blt.n	80029aa <__ieee754_atan2+0x12a>
 800296c:	4632      	mov	r2, r6
 800296e:	463b      	mov	r3, r7
 8002970:	f7fd ff10 	bl	8000794 <__aeabi_ddiv>
 8002974:	ec41 0b10 	vmov	d0, r0, r1
 8002978:	f000 ffc2 	bl	8003900 <fabs>
 800297c:	f000 fe20 	bl	80035c0 <atan>
 8002980:	ec51 0b10 	vmov	r0, r1, d0
 8002984:	2c01      	cmp	r4, #1
 8002986:	d013      	beq.n	80029b0 <__ieee754_atan2+0x130>
 8002988:	2c02      	cmp	r4, #2
 800298a:	d015      	beq.n	80029b8 <__ieee754_atan2+0x138>
 800298c:	2c00      	cmp	r4, #0
 800298e:	d098      	beq.n	80028c2 <__ieee754_atan2+0x42>
 8002990:	a321      	add	r3, pc, #132	; (adr r3, 8002a18 <__ieee754_atan2+0x198>)
 8002992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002996:	f7fd fc1b 	bl	80001d0 <__aeabi_dsub>
 800299a:	a321      	add	r3, pc, #132	; (adr r3, 8002a20 <__ieee754_atan2+0x1a0>)
 800299c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a0:	e014      	b.n	80029cc <__ieee754_atan2+0x14c>
 80029a2:	a121      	add	r1, pc, #132	; (adr r1, 8002a28 <__ieee754_atan2+0x1a8>)
 80029a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029a8:	e7ec      	b.n	8002984 <__ieee754_atan2+0x104>
 80029aa:	2000      	movs	r0, #0
 80029ac:	2100      	movs	r1, #0
 80029ae:	e7e9      	b.n	8002984 <__ieee754_atan2+0x104>
 80029b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80029b4:	4619      	mov	r1, r3
 80029b6:	e784      	b.n	80028c2 <__ieee754_atan2+0x42>
 80029b8:	a317      	add	r3, pc, #92	; (adr r3, 8002a18 <__ieee754_atan2+0x198>)
 80029ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029be:	f7fd fc07 	bl	80001d0 <__aeabi_dsub>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	a116      	add	r1, pc, #88	; (adr r1, 8002a20 <__ieee754_atan2+0x1a0>)
 80029c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029cc:	f7fd fc00 	bl	80001d0 <__aeabi_dsub>
 80029d0:	e777      	b.n	80028c2 <__ieee754_atan2+0x42>
 80029d2:	a117      	add	r1, pc, #92	; (adr r1, 8002a30 <__ieee754_atan2+0x1b0>)
 80029d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029d8:	e773      	b.n	80028c2 <__ieee754_atan2+0x42>
 80029da:	a111      	add	r1, pc, #68	; (adr r1, 8002a20 <__ieee754_atan2+0x1a0>)
 80029dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029e0:	e76f      	b.n	80028c2 <__ieee754_atan2+0x42>
 80029e2:	a111      	add	r1, pc, #68	; (adr r1, 8002a28 <__ieee754_atan2+0x1a8>)
 80029e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029e8:	e76b      	b.n	80028c2 <__ieee754_atan2+0x42>
 80029ea:	bf00      	nop
 80029ec:	f3af 8000 	nop.w
 80029f0:	54442d18 	.word	0x54442d18
 80029f4:	c00921fb 	.word	0xc00921fb
 80029f8:	54442d18 	.word	0x54442d18
 80029fc:	bff921fb 	.word	0xbff921fb
 8002a00:	54442d18 	.word	0x54442d18
 8002a04:	bfe921fb 	.word	0xbfe921fb
 8002a08:	7f3321d2 	.word	0x7f3321d2
 8002a0c:	4002d97c 	.word	0x4002d97c
 8002a10:	7f3321d2 	.word	0x7f3321d2
 8002a14:	c002d97c 	.word	0xc002d97c
 8002a18:	33145c07 	.word	0x33145c07
 8002a1c:	3ca1a626 	.word	0x3ca1a626
 8002a20:	54442d18 	.word	0x54442d18
 8002a24:	400921fb 	.word	0x400921fb
 8002a28:	54442d18 	.word	0x54442d18
 8002a2c:	3ff921fb 	.word	0x3ff921fb
 8002a30:	54442d18 	.word	0x54442d18
 8002a34:	3fe921fb 	.word	0x3fe921fb
 8002a38:	7ff00000 	.word	0x7ff00000
 8002a3c:	00000000 	.word	0x00000000

08002a40 <__ieee754_pow>:
 8002a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a44:	b091      	sub	sp, #68	; 0x44
 8002a46:	ed8d 1b00 	vstr	d1, [sp]
 8002a4a:	e9dd 2900 	ldrd	r2, r9, [sp]
 8002a4e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8002a52:	ea58 0302 	orrs.w	r3, r8, r2
 8002a56:	ec57 6b10 	vmov	r6, r7, d0
 8002a5a:	f000 84be 	beq.w	80033da <__ieee754_pow+0x99a>
 8002a5e:	4b7a      	ldr	r3, [pc, #488]	; (8002c48 <__ieee754_pow+0x208>)
 8002a60:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8002a64:	429c      	cmp	r4, r3
 8002a66:	463d      	mov	r5, r7
 8002a68:	ee10 aa10 	vmov	sl, s0
 8002a6c:	dc09      	bgt.n	8002a82 <__ieee754_pow+0x42>
 8002a6e:	d103      	bne.n	8002a78 <__ieee754_pow+0x38>
 8002a70:	b93e      	cbnz	r6, 8002a82 <__ieee754_pow+0x42>
 8002a72:	45a0      	cmp	r8, r4
 8002a74:	dc0d      	bgt.n	8002a92 <__ieee754_pow+0x52>
 8002a76:	e001      	b.n	8002a7c <__ieee754_pow+0x3c>
 8002a78:	4598      	cmp	r8, r3
 8002a7a:	dc02      	bgt.n	8002a82 <__ieee754_pow+0x42>
 8002a7c:	4598      	cmp	r8, r3
 8002a7e:	d10e      	bne.n	8002a9e <__ieee754_pow+0x5e>
 8002a80:	b16a      	cbz	r2, 8002a9e <__ieee754_pow+0x5e>
 8002a82:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002a86:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002a8a:	ea54 030a 	orrs.w	r3, r4, sl
 8002a8e:	f000 84a4 	beq.w	80033da <__ieee754_pow+0x99a>
 8002a92:	486e      	ldr	r0, [pc, #440]	; (8002c4c <__ieee754_pow+0x20c>)
 8002a94:	b011      	add	sp, #68	; 0x44
 8002a96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a9a:	f000 bf45 	b.w	8003928 <nan>
 8002a9e:	2d00      	cmp	r5, #0
 8002aa0:	da53      	bge.n	8002b4a <__ieee754_pow+0x10a>
 8002aa2:	4b6b      	ldr	r3, [pc, #428]	; (8002c50 <__ieee754_pow+0x210>)
 8002aa4:	4598      	cmp	r8, r3
 8002aa6:	dc4d      	bgt.n	8002b44 <__ieee754_pow+0x104>
 8002aa8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8002aac:	4598      	cmp	r8, r3
 8002aae:	dd4c      	ble.n	8002b4a <__ieee754_pow+0x10a>
 8002ab0:	ea4f 5328 	mov.w	r3, r8, asr #20
 8002ab4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002ab8:	2b14      	cmp	r3, #20
 8002aba:	dd26      	ble.n	8002b0a <__ieee754_pow+0xca>
 8002abc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8002ac0:	fa22 f103 	lsr.w	r1, r2, r3
 8002ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d13e      	bne.n	8002b4a <__ieee754_pow+0x10a>
 8002acc:	f001 0101 	and.w	r1, r1, #1
 8002ad0:	f1c1 0b02 	rsb	fp, r1, #2
 8002ad4:	2a00      	cmp	r2, #0
 8002ad6:	d15b      	bne.n	8002b90 <__ieee754_pow+0x150>
 8002ad8:	4b5b      	ldr	r3, [pc, #364]	; (8002c48 <__ieee754_pow+0x208>)
 8002ada:	4598      	cmp	r8, r3
 8002adc:	d124      	bne.n	8002b28 <__ieee754_pow+0xe8>
 8002ade:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8002ae2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002ae6:	ea53 030a 	orrs.w	r3, r3, sl
 8002aea:	f000 8476 	beq.w	80033da <__ieee754_pow+0x99a>
 8002aee:	4b59      	ldr	r3, [pc, #356]	; (8002c54 <__ieee754_pow+0x214>)
 8002af0:	429c      	cmp	r4, r3
 8002af2:	dd2d      	ble.n	8002b50 <__ieee754_pow+0x110>
 8002af4:	f1b9 0f00 	cmp.w	r9, #0
 8002af8:	f280 8473 	bge.w	80033e2 <__ieee754_pow+0x9a2>
 8002afc:	2000      	movs	r0, #0
 8002afe:	2100      	movs	r1, #0
 8002b00:	ec41 0b10 	vmov	d0, r0, r1
 8002b04:	b011      	add	sp, #68	; 0x44
 8002b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b0a:	2a00      	cmp	r2, #0
 8002b0c:	d13e      	bne.n	8002b8c <__ieee754_pow+0x14c>
 8002b0e:	f1c3 0314 	rsb	r3, r3, #20
 8002b12:	fa48 f103 	asr.w	r1, r8, r3
 8002b16:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1a:	4543      	cmp	r3, r8
 8002b1c:	f040 8469 	bne.w	80033f2 <__ieee754_pow+0x9b2>
 8002b20:	f001 0101 	and.w	r1, r1, #1
 8002b24:	f1c1 0b02 	rsb	fp, r1, #2
 8002b28:	4b4b      	ldr	r3, [pc, #300]	; (8002c58 <__ieee754_pow+0x218>)
 8002b2a:	4598      	cmp	r8, r3
 8002b2c:	d118      	bne.n	8002b60 <__ieee754_pow+0x120>
 8002b2e:	f1b9 0f00 	cmp.w	r9, #0
 8002b32:	f280 845a 	bge.w	80033ea <__ieee754_pow+0x9aa>
 8002b36:	4948      	ldr	r1, [pc, #288]	; (8002c58 <__ieee754_pow+0x218>)
 8002b38:	4632      	mov	r2, r6
 8002b3a:	463b      	mov	r3, r7
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f7fd fe29 	bl	8000794 <__aeabi_ddiv>
 8002b42:	e7dd      	b.n	8002b00 <__ieee754_pow+0xc0>
 8002b44:	f04f 0b02 	mov.w	fp, #2
 8002b48:	e7c4      	b.n	8002ad4 <__ieee754_pow+0x94>
 8002b4a:	f04f 0b00 	mov.w	fp, #0
 8002b4e:	e7c1      	b.n	8002ad4 <__ieee754_pow+0x94>
 8002b50:	f1b9 0f00 	cmp.w	r9, #0
 8002b54:	dad2      	bge.n	8002afc <__ieee754_pow+0xbc>
 8002b56:	e9dd 0300 	ldrd	r0, r3, [sp]
 8002b5a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8002b5e:	e7cf      	b.n	8002b00 <__ieee754_pow+0xc0>
 8002b60:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8002b64:	d106      	bne.n	8002b74 <__ieee754_pow+0x134>
 8002b66:	4632      	mov	r2, r6
 8002b68:	463b      	mov	r3, r7
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f7fd fce7 	bl	8000540 <__aeabi_dmul>
 8002b72:	e7c5      	b.n	8002b00 <__ieee754_pow+0xc0>
 8002b74:	4b39      	ldr	r3, [pc, #228]	; (8002c5c <__ieee754_pow+0x21c>)
 8002b76:	4599      	cmp	r9, r3
 8002b78:	d10a      	bne.n	8002b90 <__ieee754_pow+0x150>
 8002b7a:	2d00      	cmp	r5, #0
 8002b7c:	db08      	blt.n	8002b90 <__ieee754_pow+0x150>
 8002b7e:	ec47 6b10 	vmov	d0, r6, r7
 8002b82:	b011      	add	sp, #68	; 0x44
 8002b84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b88:	f000 bc68 	b.w	800345c <__ieee754_sqrt>
 8002b8c:	f04f 0b00 	mov.w	fp, #0
 8002b90:	ec47 6b10 	vmov	d0, r6, r7
 8002b94:	f000 feb4 	bl	8003900 <fabs>
 8002b98:	ec51 0b10 	vmov	r0, r1, d0
 8002b9c:	f1ba 0f00 	cmp.w	sl, #0
 8002ba0:	d127      	bne.n	8002bf2 <__ieee754_pow+0x1b2>
 8002ba2:	b124      	cbz	r4, 8002bae <__ieee754_pow+0x16e>
 8002ba4:	4b2c      	ldr	r3, [pc, #176]	; (8002c58 <__ieee754_pow+0x218>)
 8002ba6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d121      	bne.n	8002bf2 <__ieee754_pow+0x1b2>
 8002bae:	f1b9 0f00 	cmp.w	r9, #0
 8002bb2:	da05      	bge.n	8002bc0 <__ieee754_pow+0x180>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	2000      	movs	r0, #0
 8002bba:	4927      	ldr	r1, [pc, #156]	; (8002c58 <__ieee754_pow+0x218>)
 8002bbc:	f7fd fdea 	bl	8000794 <__aeabi_ddiv>
 8002bc0:	2d00      	cmp	r5, #0
 8002bc2:	da9d      	bge.n	8002b00 <__ieee754_pow+0xc0>
 8002bc4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002bc8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002bcc:	ea54 030b 	orrs.w	r3, r4, fp
 8002bd0:	d108      	bne.n	8002be4 <__ieee754_pow+0x1a4>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	4619      	mov	r1, r3
 8002bda:	f7fd faf9 	bl	80001d0 <__aeabi_dsub>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	e7ac      	b.n	8002b3e <__ieee754_pow+0xfe>
 8002be4:	f1bb 0f01 	cmp.w	fp, #1
 8002be8:	d18a      	bne.n	8002b00 <__ieee754_pow+0xc0>
 8002bea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002bee:	4619      	mov	r1, r3
 8002bf0:	e786      	b.n	8002b00 <__ieee754_pow+0xc0>
 8002bf2:	0fed      	lsrs	r5, r5, #31
 8002bf4:	1e6b      	subs	r3, r5, #1
 8002bf6:	930d      	str	r3, [sp, #52]	; 0x34
 8002bf8:	ea5b 0303 	orrs.w	r3, fp, r3
 8002bfc:	d102      	bne.n	8002c04 <__ieee754_pow+0x1c4>
 8002bfe:	4632      	mov	r2, r6
 8002c00:	463b      	mov	r3, r7
 8002c02:	e7e8      	b.n	8002bd6 <__ieee754_pow+0x196>
 8002c04:	4b16      	ldr	r3, [pc, #88]	; (8002c60 <__ieee754_pow+0x220>)
 8002c06:	4598      	cmp	r8, r3
 8002c08:	f340 80fe 	ble.w	8002e08 <__ieee754_pow+0x3c8>
 8002c0c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8002c10:	4598      	cmp	r8, r3
 8002c12:	dd0a      	ble.n	8002c2a <__ieee754_pow+0x1ea>
 8002c14:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <__ieee754_pow+0x214>)
 8002c16:	429c      	cmp	r4, r3
 8002c18:	dc0d      	bgt.n	8002c36 <__ieee754_pow+0x1f6>
 8002c1a:	f1b9 0f00 	cmp.w	r9, #0
 8002c1e:	f6bf af6d 	bge.w	8002afc <__ieee754_pow+0xbc>
 8002c22:	a307      	add	r3, pc, #28	; (adr r3, 8002c40 <__ieee754_pow+0x200>)
 8002c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c28:	e79f      	b.n	8002b6a <__ieee754_pow+0x12a>
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <__ieee754_pow+0x224>)
 8002c2c:	429c      	cmp	r4, r3
 8002c2e:	ddf4      	ble.n	8002c1a <__ieee754_pow+0x1da>
 8002c30:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <__ieee754_pow+0x218>)
 8002c32:	429c      	cmp	r4, r3
 8002c34:	dd18      	ble.n	8002c68 <__ieee754_pow+0x228>
 8002c36:	f1b9 0f00 	cmp.w	r9, #0
 8002c3a:	dcf2      	bgt.n	8002c22 <__ieee754_pow+0x1e2>
 8002c3c:	e75e      	b.n	8002afc <__ieee754_pow+0xbc>
 8002c3e:	bf00      	nop
 8002c40:	8800759c 	.word	0x8800759c
 8002c44:	7e37e43c 	.word	0x7e37e43c
 8002c48:	7ff00000 	.word	0x7ff00000
 8002c4c:	08003b6b 	.word	0x08003b6b
 8002c50:	433fffff 	.word	0x433fffff
 8002c54:	3fefffff 	.word	0x3fefffff
 8002c58:	3ff00000 	.word	0x3ff00000
 8002c5c:	3fe00000 	.word	0x3fe00000
 8002c60:	41e00000 	.word	0x41e00000
 8002c64:	3feffffe 	.word	0x3feffffe
 8002c68:	2200      	movs	r2, #0
 8002c6a:	4b63      	ldr	r3, [pc, #396]	; (8002df8 <__ieee754_pow+0x3b8>)
 8002c6c:	f7fd fab0 	bl	80001d0 <__aeabi_dsub>
 8002c70:	a355      	add	r3, pc, #340	; (adr r3, 8002dc8 <__ieee754_pow+0x388>)
 8002c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c76:	4604      	mov	r4, r0
 8002c78:	460d      	mov	r5, r1
 8002c7a:	f7fd fc61 	bl	8000540 <__aeabi_dmul>
 8002c7e:	a354      	add	r3, pc, #336	; (adr r3, 8002dd0 <__ieee754_pow+0x390>)
 8002c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c84:	4606      	mov	r6, r0
 8002c86:	460f      	mov	r7, r1
 8002c88:	4620      	mov	r0, r4
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	f7fd fc58 	bl	8000540 <__aeabi_dmul>
 8002c90:	2200      	movs	r2, #0
 8002c92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002c96:	4b59      	ldr	r3, [pc, #356]	; (8002dfc <__ieee754_pow+0x3bc>)
 8002c98:	4620      	mov	r0, r4
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	f7fd fc50 	bl	8000540 <__aeabi_dmul>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	a14c      	add	r1, pc, #304	; (adr r1, 8002dd8 <__ieee754_pow+0x398>)
 8002ca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002caa:	f7fd fa91 	bl	80001d0 <__aeabi_dsub>
 8002cae:	4622      	mov	r2, r4
 8002cb0:	462b      	mov	r3, r5
 8002cb2:	f7fd fc45 	bl	8000540 <__aeabi_dmul>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	2000      	movs	r0, #0
 8002cbc:	4950      	ldr	r1, [pc, #320]	; (8002e00 <__ieee754_pow+0x3c0>)
 8002cbe:	f7fd fa87 	bl	80001d0 <__aeabi_dsub>
 8002cc2:	4622      	mov	r2, r4
 8002cc4:	462b      	mov	r3, r5
 8002cc6:	4680      	mov	r8, r0
 8002cc8:	4689      	mov	r9, r1
 8002cca:	4620      	mov	r0, r4
 8002ccc:	4629      	mov	r1, r5
 8002cce:	f7fd fc37 	bl	8000540 <__aeabi_dmul>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4640      	mov	r0, r8
 8002cd8:	4649      	mov	r1, r9
 8002cda:	f7fd fc31 	bl	8000540 <__aeabi_dmul>
 8002cde:	a340      	add	r3, pc, #256	; (adr r3, 8002de0 <__ieee754_pow+0x3a0>)
 8002ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce4:	f7fd fc2c 	bl	8000540 <__aeabi_dmul>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002cf0:	f7fd fa6e 	bl	80001d0 <__aeabi_dsub>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4604      	mov	r4, r0
 8002cfa:	460d      	mov	r5, r1
 8002cfc:	4630      	mov	r0, r6
 8002cfe:	4639      	mov	r1, r7
 8002d00:	f7fd fa68 	bl	80001d4 <__adddf3>
 8002d04:	2000      	movs	r0, #0
 8002d06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002d0a:	4632      	mov	r2, r6
 8002d0c:	463b      	mov	r3, r7
 8002d0e:	f7fd fa5f 	bl	80001d0 <__aeabi_dsub>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4620      	mov	r0, r4
 8002d18:	4629      	mov	r1, r5
 8002d1a:	f7fd fa59 	bl	80001d0 <__aeabi_dsub>
 8002d1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002d20:	f10b 33ff 	add.w	r3, fp, #4294967295
 8002d24:	4313      	orrs	r3, r2
 8002d26:	4606      	mov	r6, r0
 8002d28:	460f      	mov	r7, r1
 8002d2a:	f040 81eb 	bne.w	8003104 <__ieee754_pow+0x6c4>
 8002d2e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8002de8 <__ieee754_pow+0x3a8>
 8002d32:	e9dd 4500 	ldrd	r4, r5, [sp]
 8002d36:	2400      	movs	r4, #0
 8002d38:	4622      	mov	r2, r4
 8002d3a:	462b      	mov	r3, r5
 8002d3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002d40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002d44:	f7fd fa44 	bl	80001d0 <__aeabi_dsub>
 8002d48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002d4c:	f7fd fbf8 	bl	8000540 <__aeabi_dmul>
 8002d50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002d54:	4680      	mov	r8, r0
 8002d56:	4689      	mov	r9, r1
 8002d58:	4630      	mov	r0, r6
 8002d5a:	4639      	mov	r1, r7
 8002d5c:	f7fd fbf0 	bl	8000540 <__aeabi_dmul>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4640      	mov	r0, r8
 8002d66:	4649      	mov	r1, r9
 8002d68:	f7fd fa34 	bl	80001d4 <__adddf3>
 8002d6c:	4622      	mov	r2, r4
 8002d6e:	462b      	mov	r3, r5
 8002d70:	4680      	mov	r8, r0
 8002d72:	4689      	mov	r9, r1
 8002d74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002d78:	f7fd fbe2 	bl	8000540 <__aeabi_dmul>
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4604      	mov	r4, r0
 8002d80:	460d      	mov	r5, r1
 8002d82:	4602      	mov	r2, r0
 8002d84:	4649      	mov	r1, r9
 8002d86:	4640      	mov	r0, r8
 8002d88:	e9cd 4500 	strd	r4, r5, [sp]
 8002d8c:	f7fd fa22 	bl	80001d4 <__adddf3>
 8002d90:	4b1c      	ldr	r3, [pc, #112]	; (8002e04 <__ieee754_pow+0x3c4>)
 8002d92:	4299      	cmp	r1, r3
 8002d94:	4606      	mov	r6, r0
 8002d96:	460f      	mov	r7, r1
 8002d98:	468b      	mov	fp, r1
 8002d9a:	f340 82f7 	ble.w	800338c <__ieee754_pow+0x94c>
 8002d9e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8002da2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8002da6:	4303      	orrs	r3, r0
 8002da8:	f000 81ea 	beq.w	8003180 <__ieee754_pow+0x740>
 8002dac:	a310      	add	r3, pc, #64	; (adr r3, 8002df0 <__ieee754_pow+0x3b0>)
 8002dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002db6:	f7fd fbc3 	bl	8000540 <__aeabi_dmul>
 8002dba:	a30d      	add	r3, pc, #52	; (adr r3, 8002df0 <__ieee754_pow+0x3b0>)
 8002dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc0:	e6d5      	b.n	8002b6e <__ieee754_pow+0x12e>
 8002dc2:	bf00      	nop
 8002dc4:	f3af 8000 	nop.w
 8002dc8:	60000000 	.word	0x60000000
 8002dcc:	3ff71547 	.word	0x3ff71547
 8002dd0:	f85ddf44 	.word	0xf85ddf44
 8002dd4:	3e54ae0b 	.word	0x3e54ae0b
 8002dd8:	55555555 	.word	0x55555555
 8002ddc:	3fd55555 	.word	0x3fd55555
 8002de0:	652b82fe 	.word	0x652b82fe
 8002de4:	3ff71547 	.word	0x3ff71547
 8002de8:	00000000 	.word	0x00000000
 8002dec:	bff00000 	.word	0xbff00000
 8002df0:	8800759c 	.word	0x8800759c
 8002df4:	7e37e43c 	.word	0x7e37e43c
 8002df8:	3ff00000 	.word	0x3ff00000
 8002dfc:	3fd00000 	.word	0x3fd00000
 8002e00:	3fe00000 	.word	0x3fe00000
 8002e04:	408fffff 	.word	0x408fffff
 8002e08:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	da05      	bge.n	8002e1e <__ieee754_pow+0x3de>
 8002e12:	4bd3      	ldr	r3, [pc, #844]	; (8003160 <__ieee754_pow+0x720>)
 8002e14:	f7fd fb94 	bl	8000540 <__aeabi_dmul>
 8002e18:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8002e1c:	460c      	mov	r4, r1
 8002e1e:	1523      	asrs	r3, r4, #20
 8002e20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002e24:	4413      	add	r3, r2
 8002e26:	9309      	str	r3, [sp, #36]	; 0x24
 8002e28:	4bce      	ldr	r3, [pc, #824]	; (8003164 <__ieee754_pow+0x724>)
 8002e2a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002e2e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8002e32:	429c      	cmp	r4, r3
 8002e34:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002e38:	dd08      	ble.n	8002e4c <__ieee754_pow+0x40c>
 8002e3a:	4bcb      	ldr	r3, [pc, #812]	; (8003168 <__ieee754_pow+0x728>)
 8002e3c:	429c      	cmp	r4, r3
 8002e3e:	f340 815e 	ble.w	80030fe <__ieee754_pow+0x6be>
 8002e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e44:	3301      	adds	r3, #1
 8002e46:	9309      	str	r3, [sp, #36]	; 0x24
 8002e48:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002e4c:	f04f 0a00 	mov.w	sl, #0
 8002e50:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8002e54:	930c      	str	r3, [sp, #48]	; 0x30
 8002e56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002e58:	4bc4      	ldr	r3, [pc, #784]	; (800316c <__ieee754_pow+0x72c>)
 8002e5a:	4413      	add	r3, r2
 8002e5c:	ed93 7b00 	vldr	d7, [r3]
 8002e60:	4629      	mov	r1, r5
 8002e62:	ec53 2b17 	vmov	r2, r3, d7
 8002e66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002e6a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002e6e:	f7fd f9af 	bl	80001d0 <__aeabi_dsub>
 8002e72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002e76:	4606      	mov	r6, r0
 8002e78:	460f      	mov	r7, r1
 8002e7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e7e:	f7fd f9a9 	bl	80001d4 <__adddf3>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	2000      	movs	r0, #0
 8002e88:	49b9      	ldr	r1, [pc, #740]	; (8003170 <__ieee754_pow+0x730>)
 8002e8a:	f7fd fc83 	bl	8000794 <__aeabi_ddiv>
 8002e8e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4630      	mov	r0, r6
 8002e98:	4639      	mov	r1, r7
 8002e9a:	f7fd fb51 	bl	8000540 <__aeabi_dmul>
 8002e9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002ea2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8002ea6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	9302      	str	r3, [sp, #8]
 8002eae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8002eb2:	106d      	asrs	r5, r5, #1
 8002eb4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002eb8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8002ec2:	4640      	mov	r0, r8
 8002ec4:	4649      	mov	r1, r9
 8002ec6:	4614      	mov	r4, r2
 8002ec8:	461d      	mov	r5, r3
 8002eca:	f7fd fb39 	bl	8000540 <__aeabi_dmul>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4630      	mov	r0, r6
 8002ed4:	4639      	mov	r1, r7
 8002ed6:	f7fd f97b 	bl	80001d0 <__aeabi_dsub>
 8002eda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002ede:	4606      	mov	r6, r0
 8002ee0:	460f      	mov	r7, r1
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	4629      	mov	r1, r5
 8002ee6:	f7fd f973 	bl	80001d0 <__aeabi_dsub>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002ef2:	f7fd f96d 	bl	80001d0 <__aeabi_dsub>
 8002ef6:	4642      	mov	r2, r8
 8002ef8:	464b      	mov	r3, r9
 8002efa:	f7fd fb21 	bl	8000540 <__aeabi_dmul>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4630      	mov	r0, r6
 8002f04:	4639      	mov	r1, r7
 8002f06:	f7fd f963 	bl	80001d0 <__aeabi_dsub>
 8002f0a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8002f0e:	f7fd fb17 	bl	8000540 <__aeabi_dmul>
 8002f12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002f16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	f7fd fb0f 	bl	8000540 <__aeabi_dmul>
 8002f22:	a37b      	add	r3, pc, #492	; (adr r3, 8003110 <__ieee754_pow+0x6d0>)
 8002f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f28:	4604      	mov	r4, r0
 8002f2a:	460d      	mov	r5, r1
 8002f2c:	f7fd fb08 	bl	8000540 <__aeabi_dmul>
 8002f30:	a379      	add	r3, pc, #484	; (adr r3, 8003118 <__ieee754_pow+0x6d8>)
 8002f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f36:	f7fd f94d 	bl	80001d4 <__adddf3>
 8002f3a:	4622      	mov	r2, r4
 8002f3c:	462b      	mov	r3, r5
 8002f3e:	f7fd faff 	bl	8000540 <__aeabi_dmul>
 8002f42:	a377      	add	r3, pc, #476	; (adr r3, 8003120 <__ieee754_pow+0x6e0>)
 8002f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f48:	f7fd f944 	bl	80001d4 <__adddf3>
 8002f4c:	4622      	mov	r2, r4
 8002f4e:	462b      	mov	r3, r5
 8002f50:	f7fd faf6 	bl	8000540 <__aeabi_dmul>
 8002f54:	a374      	add	r3, pc, #464	; (adr r3, 8003128 <__ieee754_pow+0x6e8>)
 8002f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5a:	f7fd f93b 	bl	80001d4 <__adddf3>
 8002f5e:	4622      	mov	r2, r4
 8002f60:	462b      	mov	r3, r5
 8002f62:	f7fd faed 	bl	8000540 <__aeabi_dmul>
 8002f66:	a372      	add	r3, pc, #456	; (adr r3, 8003130 <__ieee754_pow+0x6f0>)
 8002f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6c:	f7fd f932 	bl	80001d4 <__adddf3>
 8002f70:	4622      	mov	r2, r4
 8002f72:	462b      	mov	r3, r5
 8002f74:	f7fd fae4 	bl	8000540 <__aeabi_dmul>
 8002f78:	a36f      	add	r3, pc, #444	; (adr r3, 8003138 <__ieee754_pow+0x6f8>)
 8002f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7e:	f7fd f929 	bl	80001d4 <__adddf3>
 8002f82:	4622      	mov	r2, r4
 8002f84:	4606      	mov	r6, r0
 8002f86:	460f      	mov	r7, r1
 8002f88:	462b      	mov	r3, r5
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	f7fd fad7 	bl	8000540 <__aeabi_dmul>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4630      	mov	r0, r6
 8002f98:	4639      	mov	r1, r7
 8002f9a:	f7fd fad1 	bl	8000540 <__aeabi_dmul>
 8002f9e:	4642      	mov	r2, r8
 8002fa0:	4604      	mov	r4, r0
 8002fa2:	460d      	mov	r5, r1
 8002fa4:	464b      	mov	r3, r9
 8002fa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002faa:	f7fd f913 	bl	80001d4 <__adddf3>
 8002fae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002fb2:	f7fd fac5 	bl	8000540 <__aeabi_dmul>
 8002fb6:	4622      	mov	r2, r4
 8002fb8:	462b      	mov	r3, r5
 8002fba:	f7fd f90b 	bl	80001d4 <__adddf3>
 8002fbe:	4642      	mov	r2, r8
 8002fc0:	4606      	mov	r6, r0
 8002fc2:	460f      	mov	r7, r1
 8002fc4:	464b      	mov	r3, r9
 8002fc6:	4640      	mov	r0, r8
 8002fc8:	4649      	mov	r1, r9
 8002fca:	f7fd fab9 	bl	8000540 <__aeabi_dmul>
 8002fce:	2200      	movs	r2, #0
 8002fd0:	4b68      	ldr	r3, [pc, #416]	; (8003174 <__ieee754_pow+0x734>)
 8002fd2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002fd6:	f7fd f8fd 	bl	80001d4 <__adddf3>
 8002fda:	4632      	mov	r2, r6
 8002fdc:	463b      	mov	r3, r7
 8002fde:	f7fd f8f9 	bl	80001d4 <__adddf3>
 8002fe2:	9802      	ldr	r0, [sp, #8]
 8002fe4:	460d      	mov	r5, r1
 8002fe6:	4604      	mov	r4, r0
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4640      	mov	r0, r8
 8002fee:	4649      	mov	r1, r9
 8002ff0:	f7fd faa6 	bl	8000540 <__aeabi_dmul>
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	4680      	mov	r8, r0
 8002ff8:	4689      	mov	r9, r1
 8002ffa:	4b5e      	ldr	r3, [pc, #376]	; (8003174 <__ieee754_pow+0x734>)
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	4629      	mov	r1, r5
 8003000:	f7fd f8e6 	bl	80001d0 <__aeabi_dsub>
 8003004:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003008:	f7fd f8e2 	bl	80001d0 <__aeabi_dsub>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4630      	mov	r0, r6
 8003012:	4639      	mov	r1, r7
 8003014:	f7fd f8dc 	bl	80001d0 <__aeabi_dsub>
 8003018:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800301c:	f7fd fa90 	bl	8000540 <__aeabi_dmul>
 8003020:	4622      	mov	r2, r4
 8003022:	4606      	mov	r6, r0
 8003024:	460f      	mov	r7, r1
 8003026:	462b      	mov	r3, r5
 8003028:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800302c:	f7fd fa88 	bl	8000540 <__aeabi_dmul>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4630      	mov	r0, r6
 8003036:	4639      	mov	r1, r7
 8003038:	f7fd f8cc 	bl	80001d4 <__adddf3>
 800303c:	4606      	mov	r6, r0
 800303e:	460f      	mov	r7, r1
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4640      	mov	r0, r8
 8003046:	4649      	mov	r1, r9
 8003048:	f7fd f8c4 	bl	80001d4 <__adddf3>
 800304c:	9802      	ldr	r0, [sp, #8]
 800304e:	a33c      	add	r3, pc, #240	; (adr r3, 8003140 <__ieee754_pow+0x700>)
 8003050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003054:	4604      	mov	r4, r0
 8003056:	460d      	mov	r5, r1
 8003058:	f7fd fa72 	bl	8000540 <__aeabi_dmul>
 800305c:	4642      	mov	r2, r8
 800305e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003062:	464b      	mov	r3, r9
 8003064:	4620      	mov	r0, r4
 8003066:	4629      	mov	r1, r5
 8003068:	f7fd f8b2 	bl	80001d0 <__aeabi_dsub>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4630      	mov	r0, r6
 8003072:	4639      	mov	r1, r7
 8003074:	f7fd f8ac 	bl	80001d0 <__aeabi_dsub>
 8003078:	a333      	add	r3, pc, #204	; (adr r3, 8003148 <__ieee754_pow+0x708>)
 800307a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307e:	f7fd fa5f 	bl	8000540 <__aeabi_dmul>
 8003082:	a333      	add	r3, pc, #204	; (adr r3, 8003150 <__ieee754_pow+0x710>)
 8003084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003088:	4606      	mov	r6, r0
 800308a:	460f      	mov	r7, r1
 800308c:	4620      	mov	r0, r4
 800308e:	4629      	mov	r1, r5
 8003090:	f7fd fa56 	bl	8000540 <__aeabi_dmul>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4630      	mov	r0, r6
 800309a:	4639      	mov	r1, r7
 800309c:	f7fd f89a 	bl	80001d4 <__adddf3>
 80030a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80030a2:	4b35      	ldr	r3, [pc, #212]	; (8003178 <__ieee754_pow+0x738>)
 80030a4:	4413      	add	r3, r2
 80030a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030aa:	f7fd f893 	bl	80001d4 <__adddf3>
 80030ae:	4604      	mov	r4, r0
 80030b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030b2:	460d      	mov	r5, r1
 80030b4:	f7fd f9da 	bl	800046c <__aeabi_i2d>
 80030b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80030ba:	4b30      	ldr	r3, [pc, #192]	; (800317c <__ieee754_pow+0x73c>)
 80030bc:	4413      	add	r3, r2
 80030be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80030c2:	4606      	mov	r6, r0
 80030c4:	460f      	mov	r7, r1
 80030c6:	4622      	mov	r2, r4
 80030c8:	462b      	mov	r3, r5
 80030ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80030ce:	f7fd f881 	bl	80001d4 <__adddf3>
 80030d2:	4642      	mov	r2, r8
 80030d4:	464b      	mov	r3, r9
 80030d6:	f7fd f87d 	bl	80001d4 <__adddf3>
 80030da:	4632      	mov	r2, r6
 80030dc:	463b      	mov	r3, r7
 80030de:	f7fd f879 	bl	80001d4 <__adddf3>
 80030e2:	9802      	ldr	r0, [sp, #8]
 80030e4:	4632      	mov	r2, r6
 80030e6:	463b      	mov	r3, r7
 80030e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80030ec:	f7fd f870 	bl	80001d0 <__aeabi_dsub>
 80030f0:	4642      	mov	r2, r8
 80030f2:	464b      	mov	r3, r9
 80030f4:	f7fd f86c 	bl	80001d0 <__aeabi_dsub>
 80030f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80030fc:	e607      	b.n	8002d0e <__ieee754_pow+0x2ce>
 80030fe:	f04f 0a01 	mov.w	sl, #1
 8003102:	e6a5      	b.n	8002e50 <__ieee754_pow+0x410>
 8003104:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8003158 <__ieee754_pow+0x718>
 8003108:	e613      	b.n	8002d32 <__ieee754_pow+0x2f2>
 800310a:	bf00      	nop
 800310c:	f3af 8000 	nop.w
 8003110:	4a454eef 	.word	0x4a454eef
 8003114:	3fca7e28 	.word	0x3fca7e28
 8003118:	93c9db65 	.word	0x93c9db65
 800311c:	3fcd864a 	.word	0x3fcd864a
 8003120:	a91d4101 	.word	0xa91d4101
 8003124:	3fd17460 	.word	0x3fd17460
 8003128:	518f264d 	.word	0x518f264d
 800312c:	3fd55555 	.word	0x3fd55555
 8003130:	db6fabff 	.word	0xdb6fabff
 8003134:	3fdb6db6 	.word	0x3fdb6db6
 8003138:	33333303 	.word	0x33333303
 800313c:	3fe33333 	.word	0x3fe33333
 8003140:	e0000000 	.word	0xe0000000
 8003144:	3feec709 	.word	0x3feec709
 8003148:	dc3a03fd 	.word	0xdc3a03fd
 800314c:	3feec709 	.word	0x3feec709
 8003150:	145b01f5 	.word	0x145b01f5
 8003154:	be3e2fe0 	.word	0xbe3e2fe0
 8003158:	00000000 	.word	0x00000000
 800315c:	3ff00000 	.word	0x3ff00000
 8003160:	43400000 	.word	0x43400000
 8003164:	0003988e 	.word	0x0003988e
 8003168:	000bb679 	.word	0x000bb679
 800316c:	08003b70 	.word	0x08003b70
 8003170:	3ff00000 	.word	0x3ff00000
 8003174:	40080000 	.word	0x40080000
 8003178:	08003b90 	.word	0x08003b90
 800317c:	08003b80 	.word	0x08003b80
 8003180:	a3b4      	add	r3, pc, #720	; (adr r3, 8003454 <__ieee754_pow+0xa14>)
 8003182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003186:	4640      	mov	r0, r8
 8003188:	4649      	mov	r1, r9
 800318a:	f7fd f823 	bl	80001d4 <__adddf3>
 800318e:	4622      	mov	r2, r4
 8003190:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003194:	462b      	mov	r3, r5
 8003196:	4630      	mov	r0, r6
 8003198:	4639      	mov	r1, r7
 800319a:	f7fd f819 	bl	80001d0 <__aeabi_dsub>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80031a6:	f7fd fc5b 	bl	8000a60 <__aeabi_dcmpgt>
 80031aa:	2800      	cmp	r0, #0
 80031ac:	f47f adfe 	bne.w	8002dac <__ieee754_pow+0x36c>
 80031b0:	4aa3      	ldr	r2, [pc, #652]	; (8003440 <__ieee754_pow+0xa00>)
 80031b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80031b6:	4293      	cmp	r3, r2
 80031b8:	f340 810a 	ble.w	80033d0 <__ieee754_pow+0x990>
 80031bc:	151b      	asrs	r3, r3, #20
 80031be:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80031c2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80031c6:	fa4a f303 	asr.w	r3, sl, r3
 80031ca:	445b      	add	r3, fp
 80031cc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80031d0:	4e9c      	ldr	r6, [pc, #624]	; (8003444 <__ieee754_pow+0xa04>)
 80031d2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80031d6:	4116      	asrs	r6, r2
 80031d8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80031dc:	2000      	movs	r0, #0
 80031de:	ea23 0106 	bic.w	r1, r3, r6
 80031e2:	f1c2 0214 	rsb	r2, r2, #20
 80031e6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80031ea:	fa4a fa02 	asr.w	sl, sl, r2
 80031ee:	f1bb 0f00 	cmp.w	fp, #0
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	4620      	mov	r0, r4
 80031f8:	4629      	mov	r1, r5
 80031fa:	bfb8      	it	lt
 80031fc:	f1ca 0a00 	rsblt	sl, sl, #0
 8003200:	f7fc ffe6 	bl	80001d0 <__aeabi_dsub>
 8003204:	e9cd 0100 	strd	r0, r1, [sp]
 8003208:	4642      	mov	r2, r8
 800320a:	464b      	mov	r3, r9
 800320c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003210:	f7fc ffe0 	bl	80001d4 <__adddf3>
 8003214:	2000      	movs	r0, #0
 8003216:	a378      	add	r3, pc, #480	; (adr r3, 80033f8 <__ieee754_pow+0x9b8>)
 8003218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321c:	4604      	mov	r4, r0
 800321e:	460d      	mov	r5, r1
 8003220:	f7fd f98e 	bl	8000540 <__aeabi_dmul>
 8003224:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003228:	4606      	mov	r6, r0
 800322a:	460f      	mov	r7, r1
 800322c:	4620      	mov	r0, r4
 800322e:	4629      	mov	r1, r5
 8003230:	f7fc ffce 	bl	80001d0 <__aeabi_dsub>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4640      	mov	r0, r8
 800323a:	4649      	mov	r1, r9
 800323c:	f7fc ffc8 	bl	80001d0 <__aeabi_dsub>
 8003240:	a36f      	add	r3, pc, #444	; (adr r3, 8003400 <__ieee754_pow+0x9c0>)
 8003242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003246:	f7fd f97b 	bl	8000540 <__aeabi_dmul>
 800324a:	a36f      	add	r3, pc, #444	; (adr r3, 8003408 <__ieee754_pow+0x9c8>)
 800324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003250:	4680      	mov	r8, r0
 8003252:	4689      	mov	r9, r1
 8003254:	4620      	mov	r0, r4
 8003256:	4629      	mov	r1, r5
 8003258:	f7fd f972 	bl	8000540 <__aeabi_dmul>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4640      	mov	r0, r8
 8003262:	4649      	mov	r1, r9
 8003264:	f7fc ffb6 	bl	80001d4 <__adddf3>
 8003268:	4604      	mov	r4, r0
 800326a:	460d      	mov	r5, r1
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	4630      	mov	r0, r6
 8003272:	4639      	mov	r1, r7
 8003274:	f7fc ffae 	bl	80001d4 <__adddf3>
 8003278:	4632      	mov	r2, r6
 800327a:	463b      	mov	r3, r7
 800327c:	4680      	mov	r8, r0
 800327e:	4689      	mov	r9, r1
 8003280:	f7fc ffa6 	bl	80001d0 <__aeabi_dsub>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4620      	mov	r0, r4
 800328a:	4629      	mov	r1, r5
 800328c:	f7fc ffa0 	bl	80001d0 <__aeabi_dsub>
 8003290:	4642      	mov	r2, r8
 8003292:	4606      	mov	r6, r0
 8003294:	460f      	mov	r7, r1
 8003296:	464b      	mov	r3, r9
 8003298:	4640      	mov	r0, r8
 800329a:	4649      	mov	r1, r9
 800329c:	f7fd f950 	bl	8000540 <__aeabi_dmul>
 80032a0:	a35b      	add	r3, pc, #364	; (adr r3, 8003410 <__ieee754_pow+0x9d0>)
 80032a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a6:	4604      	mov	r4, r0
 80032a8:	460d      	mov	r5, r1
 80032aa:	f7fd f949 	bl	8000540 <__aeabi_dmul>
 80032ae:	a35a      	add	r3, pc, #360	; (adr r3, 8003418 <__ieee754_pow+0x9d8>)
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	f7fc ff8c 	bl	80001d0 <__aeabi_dsub>
 80032b8:	4622      	mov	r2, r4
 80032ba:	462b      	mov	r3, r5
 80032bc:	f7fd f940 	bl	8000540 <__aeabi_dmul>
 80032c0:	a357      	add	r3, pc, #348	; (adr r3, 8003420 <__ieee754_pow+0x9e0>)
 80032c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c6:	f7fc ff85 	bl	80001d4 <__adddf3>
 80032ca:	4622      	mov	r2, r4
 80032cc:	462b      	mov	r3, r5
 80032ce:	f7fd f937 	bl	8000540 <__aeabi_dmul>
 80032d2:	a355      	add	r3, pc, #340	; (adr r3, 8003428 <__ieee754_pow+0x9e8>)
 80032d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d8:	f7fc ff7a 	bl	80001d0 <__aeabi_dsub>
 80032dc:	4622      	mov	r2, r4
 80032de:	462b      	mov	r3, r5
 80032e0:	f7fd f92e 	bl	8000540 <__aeabi_dmul>
 80032e4:	a352      	add	r3, pc, #328	; (adr r3, 8003430 <__ieee754_pow+0x9f0>)
 80032e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ea:	f7fc ff73 	bl	80001d4 <__adddf3>
 80032ee:	4622      	mov	r2, r4
 80032f0:	462b      	mov	r3, r5
 80032f2:	f7fd f925 	bl	8000540 <__aeabi_dmul>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4640      	mov	r0, r8
 80032fc:	4649      	mov	r1, r9
 80032fe:	f7fc ff67 	bl	80001d0 <__aeabi_dsub>
 8003302:	4604      	mov	r4, r0
 8003304:	460d      	mov	r5, r1
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	4640      	mov	r0, r8
 800330c:	4649      	mov	r1, r9
 800330e:	f7fd f917 	bl	8000540 <__aeabi_dmul>
 8003312:	2200      	movs	r2, #0
 8003314:	e9cd 0100 	strd	r0, r1, [sp]
 8003318:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800331c:	4620      	mov	r0, r4
 800331e:	4629      	mov	r1, r5
 8003320:	f7fc ff56 	bl	80001d0 <__aeabi_dsub>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	e9dd 0100 	ldrd	r0, r1, [sp]
 800332c:	f7fd fa32 	bl	8000794 <__aeabi_ddiv>
 8003330:	4632      	mov	r2, r6
 8003332:	4604      	mov	r4, r0
 8003334:	460d      	mov	r5, r1
 8003336:	463b      	mov	r3, r7
 8003338:	4640      	mov	r0, r8
 800333a:	4649      	mov	r1, r9
 800333c:	f7fd f900 	bl	8000540 <__aeabi_dmul>
 8003340:	4632      	mov	r2, r6
 8003342:	463b      	mov	r3, r7
 8003344:	f7fc ff46 	bl	80001d4 <__adddf3>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4620      	mov	r0, r4
 800334e:	4629      	mov	r1, r5
 8003350:	f7fc ff3e 	bl	80001d0 <__aeabi_dsub>
 8003354:	4642      	mov	r2, r8
 8003356:	464b      	mov	r3, r9
 8003358:	f7fc ff3a 	bl	80001d0 <__aeabi_dsub>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	2000      	movs	r0, #0
 8003362:	4939      	ldr	r1, [pc, #228]	; (8003448 <__ieee754_pow+0xa08>)
 8003364:	f7fc ff34 	bl	80001d0 <__aeabi_dsub>
 8003368:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800336c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	da2f      	bge.n	80033d6 <__ieee754_pow+0x996>
 8003376:	4650      	mov	r0, sl
 8003378:	ec43 2b10 	vmov	d0, r2, r3
 800337c:	f000 fb60 	bl	8003a40 <scalbn>
 8003380:	ec51 0b10 	vmov	r0, r1, d0
 8003384:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003388:	f7ff bbf1 	b.w	8002b6e <__ieee754_pow+0x12e>
 800338c:	4b2f      	ldr	r3, [pc, #188]	; (800344c <__ieee754_pow+0xa0c>)
 800338e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003392:	429e      	cmp	r6, r3
 8003394:	f77f af0c 	ble.w	80031b0 <__ieee754_pow+0x770>
 8003398:	4b2d      	ldr	r3, [pc, #180]	; (8003450 <__ieee754_pow+0xa10>)
 800339a:	440b      	add	r3, r1
 800339c:	4303      	orrs	r3, r0
 800339e:	d00b      	beq.n	80033b8 <__ieee754_pow+0x978>
 80033a0:	a325      	add	r3, pc, #148	; (adr r3, 8003438 <__ieee754_pow+0x9f8>)
 80033a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033aa:	f7fd f8c9 	bl	8000540 <__aeabi_dmul>
 80033ae:	a322      	add	r3, pc, #136	; (adr r3, 8003438 <__ieee754_pow+0x9f8>)
 80033b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b4:	f7ff bbdb 	b.w	8002b6e <__ieee754_pow+0x12e>
 80033b8:	4622      	mov	r2, r4
 80033ba:	462b      	mov	r3, r5
 80033bc:	f7fc ff08 	bl	80001d0 <__aeabi_dsub>
 80033c0:	4642      	mov	r2, r8
 80033c2:	464b      	mov	r3, r9
 80033c4:	f7fd fb42 	bl	8000a4c <__aeabi_dcmpge>
 80033c8:	2800      	cmp	r0, #0
 80033ca:	f43f aef1 	beq.w	80031b0 <__ieee754_pow+0x770>
 80033ce:	e7e7      	b.n	80033a0 <__ieee754_pow+0x960>
 80033d0:	f04f 0a00 	mov.w	sl, #0
 80033d4:	e718      	b.n	8003208 <__ieee754_pow+0x7c8>
 80033d6:	4621      	mov	r1, r4
 80033d8:	e7d4      	b.n	8003384 <__ieee754_pow+0x944>
 80033da:	2000      	movs	r0, #0
 80033dc:	491a      	ldr	r1, [pc, #104]	; (8003448 <__ieee754_pow+0xa08>)
 80033de:	f7ff bb8f 	b.w	8002b00 <__ieee754_pow+0xc0>
 80033e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80033e6:	f7ff bb8b 	b.w	8002b00 <__ieee754_pow+0xc0>
 80033ea:	4630      	mov	r0, r6
 80033ec:	4639      	mov	r1, r7
 80033ee:	f7ff bb87 	b.w	8002b00 <__ieee754_pow+0xc0>
 80033f2:	4693      	mov	fp, r2
 80033f4:	f7ff bb98 	b.w	8002b28 <__ieee754_pow+0xe8>
 80033f8:	00000000 	.word	0x00000000
 80033fc:	3fe62e43 	.word	0x3fe62e43
 8003400:	fefa39ef 	.word	0xfefa39ef
 8003404:	3fe62e42 	.word	0x3fe62e42
 8003408:	0ca86c39 	.word	0x0ca86c39
 800340c:	be205c61 	.word	0xbe205c61
 8003410:	72bea4d0 	.word	0x72bea4d0
 8003414:	3e663769 	.word	0x3e663769
 8003418:	c5d26bf1 	.word	0xc5d26bf1
 800341c:	3ebbbd41 	.word	0x3ebbbd41
 8003420:	af25de2c 	.word	0xaf25de2c
 8003424:	3f11566a 	.word	0x3f11566a
 8003428:	16bebd93 	.word	0x16bebd93
 800342c:	3f66c16c 	.word	0x3f66c16c
 8003430:	5555553e 	.word	0x5555553e
 8003434:	3fc55555 	.word	0x3fc55555
 8003438:	c2f8f359 	.word	0xc2f8f359
 800343c:	01a56e1f 	.word	0x01a56e1f
 8003440:	3fe00000 	.word	0x3fe00000
 8003444:	000fffff 	.word	0x000fffff
 8003448:	3ff00000 	.word	0x3ff00000
 800344c:	4090cbff 	.word	0x4090cbff
 8003450:	3f6f3400 	.word	0x3f6f3400
 8003454:	652b82fe 	.word	0x652b82fe
 8003458:	3c971547 	.word	0x3c971547

0800345c <__ieee754_sqrt>:
 800345c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003460:	4955      	ldr	r1, [pc, #340]	; (80035b8 <__ieee754_sqrt+0x15c>)
 8003462:	ec55 4b10 	vmov	r4, r5, d0
 8003466:	43a9      	bics	r1, r5
 8003468:	462b      	mov	r3, r5
 800346a:	462a      	mov	r2, r5
 800346c:	d112      	bne.n	8003494 <__ieee754_sqrt+0x38>
 800346e:	ee10 2a10 	vmov	r2, s0
 8003472:	ee10 0a10 	vmov	r0, s0
 8003476:	4629      	mov	r1, r5
 8003478:	f7fd f862 	bl	8000540 <__aeabi_dmul>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4620      	mov	r0, r4
 8003482:	4629      	mov	r1, r5
 8003484:	f7fc fea6 	bl	80001d4 <__adddf3>
 8003488:	4604      	mov	r4, r0
 800348a:	460d      	mov	r5, r1
 800348c:	ec45 4b10 	vmov	d0, r4, r5
 8003490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003494:	2d00      	cmp	r5, #0
 8003496:	ee10 0a10 	vmov	r0, s0
 800349a:	4621      	mov	r1, r4
 800349c:	dc0f      	bgt.n	80034be <__ieee754_sqrt+0x62>
 800349e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80034a2:	4330      	orrs	r0, r6
 80034a4:	d0f2      	beq.n	800348c <__ieee754_sqrt+0x30>
 80034a6:	b155      	cbz	r5, 80034be <__ieee754_sqrt+0x62>
 80034a8:	ee10 2a10 	vmov	r2, s0
 80034ac:	4620      	mov	r0, r4
 80034ae:	4629      	mov	r1, r5
 80034b0:	f7fc fe8e 	bl	80001d0 <__aeabi_dsub>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	f7fd f96c 	bl	8000794 <__aeabi_ddiv>
 80034bc:	e7e4      	b.n	8003488 <__ieee754_sqrt+0x2c>
 80034be:	151b      	asrs	r3, r3, #20
 80034c0:	d073      	beq.n	80035aa <__ieee754_sqrt+0x14e>
 80034c2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80034c6:	07dd      	lsls	r5, r3, #31
 80034c8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80034cc:	bf48      	it	mi
 80034ce:	0fc8      	lsrmi	r0, r1, #31
 80034d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80034d4:	bf44      	itt	mi
 80034d6:	0049      	lslmi	r1, r1, #1
 80034d8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80034dc:	2500      	movs	r5, #0
 80034de:	1058      	asrs	r0, r3, #1
 80034e0:	0fcb      	lsrs	r3, r1, #31
 80034e2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80034e6:	0049      	lsls	r1, r1, #1
 80034e8:	2316      	movs	r3, #22
 80034ea:	462c      	mov	r4, r5
 80034ec:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80034f0:	19a7      	adds	r7, r4, r6
 80034f2:	4297      	cmp	r7, r2
 80034f4:	bfde      	ittt	le
 80034f6:	19bc      	addle	r4, r7, r6
 80034f8:	1bd2      	suble	r2, r2, r7
 80034fa:	19ad      	addle	r5, r5, r6
 80034fc:	0fcf      	lsrs	r7, r1, #31
 80034fe:	3b01      	subs	r3, #1
 8003500:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8003504:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003508:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800350c:	d1f0      	bne.n	80034f0 <__ieee754_sqrt+0x94>
 800350e:	f04f 0c20 	mov.w	ip, #32
 8003512:	469e      	mov	lr, r3
 8003514:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003518:	42a2      	cmp	r2, r4
 800351a:	eb06 070e 	add.w	r7, r6, lr
 800351e:	dc02      	bgt.n	8003526 <__ieee754_sqrt+0xca>
 8003520:	d112      	bne.n	8003548 <__ieee754_sqrt+0xec>
 8003522:	428f      	cmp	r7, r1
 8003524:	d810      	bhi.n	8003548 <__ieee754_sqrt+0xec>
 8003526:	2f00      	cmp	r7, #0
 8003528:	eb07 0e06 	add.w	lr, r7, r6
 800352c:	da42      	bge.n	80035b4 <__ieee754_sqrt+0x158>
 800352e:	f1be 0f00 	cmp.w	lr, #0
 8003532:	db3f      	blt.n	80035b4 <__ieee754_sqrt+0x158>
 8003534:	f104 0801 	add.w	r8, r4, #1
 8003538:	1b12      	subs	r2, r2, r4
 800353a:	428f      	cmp	r7, r1
 800353c:	bf88      	it	hi
 800353e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8003542:	1bc9      	subs	r1, r1, r7
 8003544:	4433      	add	r3, r6
 8003546:	4644      	mov	r4, r8
 8003548:	0052      	lsls	r2, r2, #1
 800354a:	f1bc 0c01 	subs.w	ip, ip, #1
 800354e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8003552:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003556:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800355a:	d1dd      	bne.n	8003518 <__ieee754_sqrt+0xbc>
 800355c:	430a      	orrs	r2, r1
 800355e:	d006      	beq.n	800356e <__ieee754_sqrt+0x112>
 8003560:	1c5c      	adds	r4, r3, #1
 8003562:	bf13      	iteet	ne
 8003564:	3301      	addne	r3, #1
 8003566:	3501      	addeq	r5, #1
 8003568:	4663      	moveq	r3, ip
 800356a:	f023 0301 	bicne.w	r3, r3, #1
 800356e:	106a      	asrs	r2, r5, #1
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	07e9      	lsls	r1, r5, #31
 8003574:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8003578:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800357c:	bf48      	it	mi
 800357e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8003582:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8003586:	461c      	mov	r4, r3
 8003588:	e780      	b.n	800348c <__ieee754_sqrt+0x30>
 800358a:	0aca      	lsrs	r2, r1, #11
 800358c:	3815      	subs	r0, #21
 800358e:	0549      	lsls	r1, r1, #21
 8003590:	2a00      	cmp	r2, #0
 8003592:	d0fa      	beq.n	800358a <__ieee754_sqrt+0x12e>
 8003594:	02d6      	lsls	r6, r2, #11
 8003596:	d50a      	bpl.n	80035ae <__ieee754_sqrt+0x152>
 8003598:	f1c3 0420 	rsb	r4, r3, #32
 800359c:	fa21 f404 	lsr.w	r4, r1, r4
 80035a0:	1e5d      	subs	r5, r3, #1
 80035a2:	4099      	lsls	r1, r3
 80035a4:	4322      	orrs	r2, r4
 80035a6:	1b43      	subs	r3, r0, r5
 80035a8:	e78b      	b.n	80034c2 <__ieee754_sqrt+0x66>
 80035aa:	4618      	mov	r0, r3
 80035ac:	e7f0      	b.n	8003590 <__ieee754_sqrt+0x134>
 80035ae:	0052      	lsls	r2, r2, #1
 80035b0:	3301      	adds	r3, #1
 80035b2:	e7ef      	b.n	8003594 <__ieee754_sqrt+0x138>
 80035b4:	46a0      	mov	r8, r4
 80035b6:	e7bf      	b.n	8003538 <__ieee754_sqrt+0xdc>
 80035b8:	7ff00000 	.word	0x7ff00000
 80035bc:	00000000 	.word	0x00000000

080035c0 <atan>:
 80035c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035c4:	ec55 4b10 	vmov	r4, r5, d0
 80035c8:	4bc3      	ldr	r3, [pc, #780]	; (80038d8 <atan+0x318>)
 80035ca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80035ce:	429e      	cmp	r6, r3
 80035d0:	46ab      	mov	fp, r5
 80035d2:	dd18      	ble.n	8003606 <atan+0x46>
 80035d4:	4bc1      	ldr	r3, [pc, #772]	; (80038dc <atan+0x31c>)
 80035d6:	429e      	cmp	r6, r3
 80035d8:	dc01      	bgt.n	80035de <atan+0x1e>
 80035da:	d109      	bne.n	80035f0 <atan+0x30>
 80035dc:	b144      	cbz	r4, 80035f0 <atan+0x30>
 80035de:	4622      	mov	r2, r4
 80035e0:	462b      	mov	r3, r5
 80035e2:	4620      	mov	r0, r4
 80035e4:	4629      	mov	r1, r5
 80035e6:	f7fc fdf5 	bl	80001d4 <__adddf3>
 80035ea:	4604      	mov	r4, r0
 80035ec:	460d      	mov	r5, r1
 80035ee:	e006      	b.n	80035fe <atan+0x3e>
 80035f0:	f1bb 0f00 	cmp.w	fp, #0
 80035f4:	f340 8131 	ble.w	800385a <atan+0x29a>
 80035f8:	a59b      	add	r5, pc, #620	; (adr r5, 8003868 <atan+0x2a8>)
 80035fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80035fe:	ec45 4b10 	vmov	d0, r4, r5
 8003602:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003606:	4bb6      	ldr	r3, [pc, #728]	; (80038e0 <atan+0x320>)
 8003608:	429e      	cmp	r6, r3
 800360a:	dc14      	bgt.n	8003636 <atan+0x76>
 800360c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8003610:	429e      	cmp	r6, r3
 8003612:	dc0d      	bgt.n	8003630 <atan+0x70>
 8003614:	a396      	add	r3, pc, #600	; (adr r3, 8003870 <atan+0x2b0>)
 8003616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361a:	ee10 0a10 	vmov	r0, s0
 800361e:	4629      	mov	r1, r5
 8003620:	f7fc fdd8 	bl	80001d4 <__adddf3>
 8003624:	2200      	movs	r2, #0
 8003626:	4baf      	ldr	r3, [pc, #700]	; (80038e4 <atan+0x324>)
 8003628:	f7fd fa1a 	bl	8000a60 <__aeabi_dcmpgt>
 800362c:	2800      	cmp	r0, #0
 800362e:	d1e6      	bne.n	80035fe <atan+0x3e>
 8003630:	f04f 3aff 	mov.w	sl, #4294967295
 8003634:	e02b      	b.n	800368e <atan+0xce>
 8003636:	f000 f963 	bl	8003900 <fabs>
 800363a:	4bab      	ldr	r3, [pc, #684]	; (80038e8 <atan+0x328>)
 800363c:	429e      	cmp	r6, r3
 800363e:	ec55 4b10 	vmov	r4, r5, d0
 8003642:	f300 80bf 	bgt.w	80037c4 <atan+0x204>
 8003646:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800364a:	429e      	cmp	r6, r3
 800364c:	f300 80a0 	bgt.w	8003790 <atan+0x1d0>
 8003650:	ee10 2a10 	vmov	r2, s0
 8003654:	ee10 0a10 	vmov	r0, s0
 8003658:	462b      	mov	r3, r5
 800365a:	4629      	mov	r1, r5
 800365c:	f7fc fdba 	bl	80001d4 <__adddf3>
 8003660:	2200      	movs	r2, #0
 8003662:	4ba0      	ldr	r3, [pc, #640]	; (80038e4 <atan+0x324>)
 8003664:	f7fc fdb4 	bl	80001d0 <__aeabi_dsub>
 8003668:	2200      	movs	r2, #0
 800366a:	4606      	mov	r6, r0
 800366c:	460f      	mov	r7, r1
 800366e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003672:	4620      	mov	r0, r4
 8003674:	4629      	mov	r1, r5
 8003676:	f7fc fdad 	bl	80001d4 <__adddf3>
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	4630      	mov	r0, r6
 8003680:	4639      	mov	r1, r7
 8003682:	f7fd f887 	bl	8000794 <__aeabi_ddiv>
 8003686:	f04f 0a00 	mov.w	sl, #0
 800368a:	4604      	mov	r4, r0
 800368c:	460d      	mov	r5, r1
 800368e:	4622      	mov	r2, r4
 8003690:	462b      	mov	r3, r5
 8003692:	4620      	mov	r0, r4
 8003694:	4629      	mov	r1, r5
 8003696:	f7fc ff53 	bl	8000540 <__aeabi_dmul>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4680      	mov	r8, r0
 80036a0:	4689      	mov	r9, r1
 80036a2:	f7fc ff4d 	bl	8000540 <__aeabi_dmul>
 80036a6:	a374      	add	r3, pc, #464	; (adr r3, 8003878 <atan+0x2b8>)
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	4606      	mov	r6, r0
 80036ae:	460f      	mov	r7, r1
 80036b0:	f7fc ff46 	bl	8000540 <__aeabi_dmul>
 80036b4:	a372      	add	r3, pc, #456	; (adr r3, 8003880 <atan+0x2c0>)
 80036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ba:	f7fc fd8b 	bl	80001d4 <__adddf3>
 80036be:	4632      	mov	r2, r6
 80036c0:	463b      	mov	r3, r7
 80036c2:	f7fc ff3d 	bl	8000540 <__aeabi_dmul>
 80036c6:	a370      	add	r3, pc, #448	; (adr r3, 8003888 <atan+0x2c8>)
 80036c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036cc:	f7fc fd82 	bl	80001d4 <__adddf3>
 80036d0:	4632      	mov	r2, r6
 80036d2:	463b      	mov	r3, r7
 80036d4:	f7fc ff34 	bl	8000540 <__aeabi_dmul>
 80036d8:	a36d      	add	r3, pc, #436	; (adr r3, 8003890 <atan+0x2d0>)
 80036da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036de:	f7fc fd79 	bl	80001d4 <__adddf3>
 80036e2:	4632      	mov	r2, r6
 80036e4:	463b      	mov	r3, r7
 80036e6:	f7fc ff2b 	bl	8000540 <__aeabi_dmul>
 80036ea:	a36b      	add	r3, pc, #428	; (adr r3, 8003898 <atan+0x2d8>)
 80036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f0:	f7fc fd70 	bl	80001d4 <__adddf3>
 80036f4:	4632      	mov	r2, r6
 80036f6:	463b      	mov	r3, r7
 80036f8:	f7fc ff22 	bl	8000540 <__aeabi_dmul>
 80036fc:	a368      	add	r3, pc, #416	; (adr r3, 80038a0 <atan+0x2e0>)
 80036fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003702:	f7fc fd67 	bl	80001d4 <__adddf3>
 8003706:	4642      	mov	r2, r8
 8003708:	464b      	mov	r3, r9
 800370a:	f7fc ff19 	bl	8000540 <__aeabi_dmul>
 800370e:	a366      	add	r3, pc, #408	; (adr r3, 80038a8 <atan+0x2e8>)
 8003710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003714:	4680      	mov	r8, r0
 8003716:	4689      	mov	r9, r1
 8003718:	4630      	mov	r0, r6
 800371a:	4639      	mov	r1, r7
 800371c:	f7fc ff10 	bl	8000540 <__aeabi_dmul>
 8003720:	a363      	add	r3, pc, #396	; (adr r3, 80038b0 <atan+0x2f0>)
 8003722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003726:	f7fc fd53 	bl	80001d0 <__aeabi_dsub>
 800372a:	4632      	mov	r2, r6
 800372c:	463b      	mov	r3, r7
 800372e:	f7fc ff07 	bl	8000540 <__aeabi_dmul>
 8003732:	a361      	add	r3, pc, #388	; (adr r3, 80038b8 <atan+0x2f8>)
 8003734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003738:	f7fc fd4a 	bl	80001d0 <__aeabi_dsub>
 800373c:	4632      	mov	r2, r6
 800373e:	463b      	mov	r3, r7
 8003740:	f7fc fefe 	bl	8000540 <__aeabi_dmul>
 8003744:	a35e      	add	r3, pc, #376	; (adr r3, 80038c0 <atan+0x300>)
 8003746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374a:	f7fc fd41 	bl	80001d0 <__aeabi_dsub>
 800374e:	4632      	mov	r2, r6
 8003750:	463b      	mov	r3, r7
 8003752:	f7fc fef5 	bl	8000540 <__aeabi_dmul>
 8003756:	a35c      	add	r3, pc, #368	; (adr r3, 80038c8 <atan+0x308>)
 8003758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375c:	f7fc fd38 	bl	80001d0 <__aeabi_dsub>
 8003760:	4632      	mov	r2, r6
 8003762:	463b      	mov	r3, r7
 8003764:	f7fc feec 	bl	8000540 <__aeabi_dmul>
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	4640      	mov	r0, r8
 800376e:	4649      	mov	r1, r9
 8003770:	f7fc fd30 	bl	80001d4 <__adddf3>
 8003774:	4622      	mov	r2, r4
 8003776:	462b      	mov	r3, r5
 8003778:	f7fc fee2 	bl	8000540 <__aeabi_dmul>
 800377c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	d14b      	bne.n	800381e <atan+0x25e>
 8003786:	4620      	mov	r0, r4
 8003788:	4629      	mov	r1, r5
 800378a:	f7fc fd21 	bl	80001d0 <__aeabi_dsub>
 800378e:	e72c      	b.n	80035ea <atan+0x2a>
 8003790:	ee10 0a10 	vmov	r0, s0
 8003794:	2200      	movs	r2, #0
 8003796:	4b53      	ldr	r3, [pc, #332]	; (80038e4 <atan+0x324>)
 8003798:	4629      	mov	r1, r5
 800379a:	f7fc fd19 	bl	80001d0 <__aeabi_dsub>
 800379e:	2200      	movs	r2, #0
 80037a0:	4606      	mov	r6, r0
 80037a2:	460f      	mov	r7, r1
 80037a4:	4b4f      	ldr	r3, [pc, #316]	; (80038e4 <atan+0x324>)
 80037a6:	4620      	mov	r0, r4
 80037a8:	4629      	mov	r1, r5
 80037aa:	f7fc fd13 	bl	80001d4 <__adddf3>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4630      	mov	r0, r6
 80037b4:	4639      	mov	r1, r7
 80037b6:	f7fc ffed 	bl	8000794 <__aeabi_ddiv>
 80037ba:	f04f 0a01 	mov.w	sl, #1
 80037be:	4604      	mov	r4, r0
 80037c0:	460d      	mov	r5, r1
 80037c2:	e764      	b.n	800368e <atan+0xce>
 80037c4:	4b49      	ldr	r3, [pc, #292]	; (80038ec <atan+0x32c>)
 80037c6:	429e      	cmp	r6, r3
 80037c8:	dc1d      	bgt.n	8003806 <atan+0x246>
 80037ca:	ee10 0a10 	vmov	r0, s0
 80037ce:	2200      	movs	r2, #0
 80037d0:	4b47      	ldr	r3, [pc, #284]	; (80038f0 <atan+0x330>)
 80037d2:	4629      	mov	r1, r5
 80037d4:	f7fc fcfc 	bl	80001d0 <__aeabi_dsub>
 80037d8:	2200      	movs	r2, #0
 80037da:	4606      	mov	r6, r0
 80037dc:	460f      	mov	r7, r1
 80037de:	4b44      	ldr	r3, [pc, #272]	; (80038f0 <atan+0x330>)
 80037e0:	4620      	mov	r0, r4
 80037e2:	4629      	mov	r1, r5
 80037e4:	f7fc feac 	bl	8000540 <__aeabi_dmul>
 80037e8:	2200      	movs	r2, #0
 80037ea:	4b3e      	ldr	r3, [pc, #248]	; (80038e4 <atan+0x324>)
 80037ec:	f7fc fcf2 	bl	80001d4 <__adddf3>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4630      	mov	r0, r6
 80037f6:	4639      	mov	r1, r7
 80037f8:	f7fc ffcc 	bl	8000794 <__aeabi_ddiv>
 80037fc:	f04f 0a02 	mov.w	sl, #2
 8003800:	4604      	mov	r4, r0
 8003802:	460d      	mov	r5, r1
 8003804:	e743      	b.n	800368e <atan+0xce>
 8003806:	462b      	mov	r3, r5
 8003808:	ee10 2a10 	vmov	r2, s0
 800380c:	2000      	movs	r0, #0
 800380e:	4939      	ldr	r1, [pc, #228]	; (80038f4 <atan+0x334>)
 8003810:	f7fc ffc0 	bl	8000794 <__aeabi_ddiv>
 8003814:	f04f 0a03 	mov.w	sl, #3
 8003818:	4604      	mov	r4, r0
 800381a:	460d      	mov	r5, r1
 800381c:	e737      	b.n	800368e <atan+0xce>
 800381e:	4b36      	ldr	r3, [pc, #216]	; (80038f8 <atan+0x338>)
 8003820:	4e36      	ldr	r6, [pc, #216]	; (80038fc <atan+0x33c>)
 8003822:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8003826:	4456      	add	r6, sl
 8003828:	449a      	add	sl, r3
 800382a:	e9da 2300 	ldrd	r2, r3, [sl]
 800382e:	f7fc fccf 	bl	80001d0 <__aeabi_dsub>
 8003832:	4622      	mov	r2, r4
 8003834:	462b      	mov	r3, r5
 8003836:	f7fc fccb 	bl	80001d0 <__aeabi_dsub>
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8003842:	f7fc fcc5 	bl	80001d0 <__aeabi_dsub>
 8003846:	f1bb 0f00 	cmp.w	fp, #0
 800384a:	4604      	mov	r4, r0
 800384c:	460d      	mov	r5, r1
 800384e:	f6bf aed6 	bge.w	80035fe <atan+0x3e>
 8003852:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003856:	461d      	mov	r5, r3
 8003858:	e6d1      	b.n	80035fe <atan+0x3e>
 800385a:	a51d      	add	r5, pc, #116	; (adr r5, 80038d0 <atan+0x310>)
 800385c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003860:	e6cd      	b.n	80035fe <atan+0x3e>
 8003862:	bf00      	nop
 8003864:	f3af 8000 	nop.w
 8003868:	54442d18 	.word	0x54442d18
 800386c:	3ff921fb 	.word	0x3ff921fb
 8003870:	8800759c 	.word	0x8800759c
 8003874:	7e37e43c 	.word	0x7e37e43c
 8003878:	e322da11 	.word	0xe322da11
 800387c:	3f90ad3a 	.word	0x3f90ad3a
 8003880:	24760deb 	.word	0x24760deb
 8003884:	3fa97b4b 	.word	0x3fa97b4b
 8003888:	a0d03d51 	.word	0xa0d03d51
 800388c:	3fb10d66 	.word	0x3fb10d66
 8003890:	c54c206e 	.word	0xc54c206e
 8003894:	3fb745cd 	.word	0x3fb745cd
 8003898:	920083ff 	.word	0x920083ff
 800389c:	3fc24924 	.word	0x3fc24924
 80038a0:	5555550d 	.word	0x5555550d
 80038a4:	3fd55555 	.word	0x3fd55555
 80038a8:	2c6a6c2f 	.word	0x2c6a6c2f
 80038ac:	bfa2b444 	.word	0xbfa2b444
 80038b0:	52defd9a 	.word	0x52defd9a
 80038b4:	3fadde2d 	.word	0x3fadde2d
 80038b8:	af749a6d 	.word	0xaf749a6d
 80038bc:	3fb3b0f2 	.word	0x3fb3b0f2
 80038c0:	fe231671 	.word	0xfe231671
 80038c4:	3fbc71c6 	.word	0x3fbc71c6
 80038c8:	9998ebc4 	.word	0x9998ebc4
 80038cc:	3fc99999 	.word	0x3fc99999
 80038d0:	54442d18 	.word	0x54442d18
 80038d4:	bff921fb 	.word	0xbff921fb
 80038d8:	440fffff 	.word	0x440fffff
 80038dc:	7ff00000 	.word	0x7ff00000
 80038e0:	3fdbffff 	.word	0x3fdbffff
 80038e4:	3ff00000 	.word	0x3ff00000
 80038e8:	3ff2ffff 	.word	0x3ff2ffff
 80038ec:	40037fff 	.word	0x40037fff
 80038f0:	3ff80000 	.word	0x3ff80000
 80038f4:	bff00000 	.word	0xbff00000
 80038f8:	08003bc0 	.word	0x08003bc0
 80038fc:	08003ba0 	.word	0x08003ba0

08003900 <fabs>:
 8003900:	ec51 0b10 	vmov	r0, r1, d0
 8003904:	ee10 2a10 	vmov	r2, s0
 8003908:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800390c:	ec43 2b10 	vmov	d0, r2, r3
 8003910:	4770      	bx	lr

08003912 <finite>:
 8003912:	ee10 3a90 	vmov	r3, s1
 8003916:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800391a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800391e:	0fc0      	lsrs	r0, r0, #31
 8003920:	4770      	bx	lr

08003922 <matherr>:
 8003922:	2000      	movs	r0, #0
 8003924:	4770      	bx	lr
	...

08003928 <nan>:
 8003928:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8003930 <nan+0x8>
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	00000000 	.word	0x00000000
 8003934:	7ff80000 	.word	0x7ff80000

08003938 <rint>:
 8003938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800393a:	ec51 0b10 	vmov	r0, r1, d0
 800393e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003942:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8003946:	2e13      	cmp	r6, #19
 8003948:	460b      	mov	r3, r1
 800394a:	ee10 4a10 	vmov	r4, s0
 800394e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8003952:	dc56      	bgt.n	8003a02 <rint+0xca>
 8003954:	2e00      	cmp	r6, #0
 8003956:	da2b      	bge.n	80039b0 <rint+0x78>
 8003958:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800395c:	4302      	orrs	r2, r0
 800395e:	d023      	beq.n	80039a8 <rint+0x70>
 8003960:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8003964:	4302      	orrs	r2, r0
 8003966:	4254      	negs	r4, r2
 8003968:	4314      	orrs	r4, r2
 800396a:	0c4b      	lsrs	r3, r1, #17
 800396c:	0b24      	lsrs	r4, r4, #12
 800396e:	045b      	lsls	r3, r3, #17
 8003970:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8003974:	ea44 0103 	orr.w	r1, r4, r3
 8003978:	460b      	mov	r3, r1
 800397a:	492f      	ldr	r1, [pc, #188]	; (8003a38 <rint+0x100>)
 800397c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8003980:	e9d1 6700 	ldrd	r6, r7, [r1]
 8003984:	4602      	mov	r2, r0
 8003986:	4639      	mov	r1, r7
 8003988:	4630      	mov	r0, r6
 800398a:	f7fc fc23 	bl	80001d4 <__adddf3>
 800398e:	e9cd 0100 	strd	r0, r1, [sp]
 8003992:	463b      	mov	r3, r7
 8003994:	4632      	mov	r2, r6
 8003996:	e9dd 0100 	ldrd	r0, r1, [sp]
 800399a:	f7fc fc19 	bl	80001d0 <__aeabi_dsub>
 800399e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80039a2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80039a6:	4639      	mov	r1, r7
 80039a8:	ec41 0b10 	vmov	d0, r0, r1
 80039ac:	b003      	add	sp, #12
 80039ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039b0:	4a22      	ldr	r2, [pc, #136]	; (8003a3c <rint+0x104>)
 80039b2:	4132      	asrs	r2, r6
 80039b4:	ea01 0702 	and.w	r7, r1, r2
 80039b8:	4307      	orrs	r7, r0
 80039ba:	d0f5      	beq.n	80039a8 <rint+0x70>
 80039bc:	0852      	lsrs	r2, r2, #1
 80039be:	4011      	ands	r1, r2
 80039c0:	430c      	orrs	r4, r1
 80039c2:	d00b      	beq.n	80039dc <rint+0xa4>
 80039c4:	ea23 0202 	bic.w	r2, r3, r2
 80039c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80039cc:	2e13      	cmp	r6, #19
 80039ce:	fa43 f306 	asr.w	r3, r3, r6
 80039d2:	bf0c      	ite	eq
 80039d4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80039d8:	2400      	movne	r4, #0
 80039da:	4313      	orrs	r3, r2
 80039dc:	4916      	ldr	r1, [pc, #88]	; (8003a38 <rint+0x100>)
 80039de:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80039e2:	4622      	mov	r2, r4
 80039e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80039e8:	4620      	mov	r0, r4
 80039ea:	4629      	mov	r1, r5
 80039ec:	f7fc fbf2 	bl	80001d4 <__adddf3>
 80039f0:	e9cd 0100 	strd	r0, r1, [sp]
 80039f4:	4622      	mov	r2, r4
 80039f6:	462b      	mov	r3, r5
 80039f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039fc:	f7fc fbe8 	bl	80001d0 <__aeabi_dsub>
 8003a00:	e7d2      	b.n	80039a8 <rint+0x70>
 8003a02:	2e33      	cmp	r6, #51	; 0x33
 8003a04:	dd07      	ble.n	8003a16 <rint+0xde>
 8003a06:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003a0a:	d1cd      	bne.n	80039a8 <rint+0x70>
 8003a0c:	ee10 2a10 	vmov	r2, s0
 8003a10:	f7fc fbe0 	bl	80001d4 <__adddf3>
 8003a14:	e7c8      	b.n	80039a8 <rint+0x70>
 8003a16:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8003a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a1e:	40f2      	lsrs	r2, r6
 8003a20:	4210      	tst	r0, r2
 8003a22:	d0c1      	beq.n	80039a8 <rint+0x70>
 8003a24:	0852      	lsrs	r2, r2, #1
 8003a26:	4210      	tst	r0, r2
 8003a28:	bf1f      	itttt	ne
 8003a2a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8003a2e:	ea20 0202 	bicne.w	r2, r0, r2
 8003a32:	4134      	asrne	r4, r6
 8003a34:	4314      	orrne	r4, r2
 8003a36:	e7d1      	b.n	80039dc <rint+0xa4>
 8003a38:	08003be0 	.word	0x08003be0
 8003a3c:	000fffff 	.word	0x000fffff

08003a40 <scalbn>:
 8003a40:	b570      	push	{r4, r5, r6, lr}
 8003a42:	ec55 4b10 	vmov	r4, r5, d0
 8003a46:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8003a4a:	4606      	mov	r6, r0
 8003a4c:	462b      	mov	r3, r5
 8003a4e:	b9aa      	cbnz	r2, 8003a7c <scalbn+0x3c>
 8003a50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003a54:	4323      	orrs	r3, r4
 8003a56:	d03b      	beq.n	8003ad0 <scalbn+0x90>
 8003a58:	4b31      	ldr	r3, [pc, #196]	; (8003b20 <scalbn+0xe0>)
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	ee10 0a10 	vmov	r0, s0
 8003a62:	f7fc fd6d 	bl	8000540 <__aeabi_dmul>
 8003a66:	4b2f      	ldr	r3, [pc, #188]	; (8003b24 <scalbn+0xe4>)
 8003a68:	429e      	cmp	r6, r3
 8003a6a:	4604      	mov	r4, r0
 8003a6c:	460d      	mov	r5, r1
 8003a6e:	da12      	bge.n	8003a96 <scalbn+0x56>
 8003a70:	a327      	add	r3, pc, #156	; (adr r3, 8003b10 <scalbn+0xd0>)
 8003a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a76:	f7fc fd63 	bl	8000540 <__aeabi_dmul>
 8003a7a:	e009      	b.n	8003a90 <scalbn+0x50>
 8003a7c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003a80:	428a      	cmp	r2, r1
 8003a82:	d10c      	bne.n	8003a9e <scalbn+0x5e>
 8003a84:	ee10 2a10 	vmov	r2, s0
 8003a88:	4620      	mov	r0, r4
 8003a8a:	4629      	mov	r1, r5
 8003a8c:	f7fc fba2 	bl	80001d4 <__adddf3>
 8003a90:	4604      	mov	r4, r0
 8003a92:	460d      	mov	r5, r1
 8003a94:	e01c      	b.n	8003ad0 <scalbn+0x90>
 8003a96:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	3a36      	subs	r2, #54	; 0x36
 8003a9e:	4432      	add	r2, r6
 8003aa0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003aa4:	428a      	cmp	r2, r1
 8003aa6:	dd0b      	ble.n	8003ac0 <scalbn+0x80>
 8003aa8:	ec45 4b11 	vmov	d1, r4, r5
 8003aac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8003b18 <scalbn+0xd8>
 8003ab0:	f000 f83c 	bl	8003b2c <copysign>
 8003ab4:	a318      	add	r3, pc, #96	; (adr r3, 8003b18 <scalbn+0xd8>)
 8003ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aba:	ec51 0b10 	vmov	r0, r1, d0
 8003abe:	e7da      	b.n	8003a76 <scalbn+0x36>
 8003ac0:	2a00      	cmp	r2, #0
 8003ac2:	dd08      	ble.n	8003ad6 <scalbn+0x96>
 8003ac4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003ac8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003acc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003ad0:	ec45 4b10 	vmov	d0, r4, r5
 8003ad4:	bd70      	pop	{r4, r5, r6, pc}
 8003ad6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003ada:	da0d      	bge.n	8003af8 <scalbn+0xb8>
 8003adc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003ae0:	429e      	cmp	r6, r3
 8003ae2:	ec45 4b11 	vmov	d1, r4, r5
 8003ae6:	dce1      	bgt.n	8003aac <scalbn+0x6c>
 8003ae8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8003b10 <scalbn+0xd0>
 8003aec:	f000 f81e 	bl	8003b2c <copysign>
 8003af0:	a307      	add	r3, pc, #28	; (adr r3, 8003b10 <scalbn+0xd0>)
 8003af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af6:	e7e0      	b.n	8003aba <scalbn+0x7a>
 8003af8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003afc:	3236      	adds	r2, #54	; 0x36
 8003afe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003b02:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003b06:	4620      	mov	r0, r4
 8003b08:	4629      	mov	r1, r5
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <scalbn+0xe8>)
 8003b0e:	e7b2      	b.n	8003a76 <scalbn+0x36>
 8003b10:	c2f8f359 	.word	0xc2f8f359
 8003b14:	01a56e1f 	.word	0x01a56e1f
 8003b18:	8800759c 	.word	0x8800759c
 8003b1c:	7e37e43c 	.word	0x7e37e43c
 8003b20:	43500000 	.word	0x43500000
 8003b24:	ffff3cb0 	.word	0xffff3cb0
 8003b28:	3c900000 	.word	0x3c900000

08003b2c <copysign>:
 8003b2c:	ec51 0b10 	vmov	r0, r1, d0
 8003b30:	ee11 0a90 	vmov	r0, s3
 8003b34:	ee10 2a10 	vmov	r2, s0
 8003b38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003b3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8003b40:	ea41 0300 	orr.w	r3, r1, r0
 8003b44:	ec43 2b10 	vmov	d0, r2, r3
 8003b48:	4770      	bx	lr
	...

08003b4c <_init>:
 8003b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4e:	bf00      	nop
 8003b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b52:	bc08      	pop	{r3}
 8003b54:	469e      	mov	lr, r3
 8003b56:	4770      	bx	lr

08003b58 <_fini>:
 8003b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5a:	bf00      	nop
 8003b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5e:	bc08      	pop	{r3}
 8003b60:	469e      	mov	lr, r3
 8003b62:	4770      	bx	lr
